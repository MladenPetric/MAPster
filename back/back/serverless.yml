# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: petardragicevic
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: app
# "service" is the name of this project. This will also be added to your AWS resource names.
service: back

provider:
  name: aws
  runtime: python3.12
  region: eu-central-1
  environment:
    ARTISTS_TABLE: ${self:service}-artists
    MUSIC_BUCKET: ${self:service}-music-bucket
    MUSIC_FILES_TABLE: ${self:service}-music-files
    MUSIC_META_TABLE: ${self:service}-music-meta
    ALBUMS_TABLE: ${self:service}-albums
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:Scan"
            - "dynamodb:GetItem"
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-artists"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-albums"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-music-files"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-music-meta"

        - Effect: "Allow"
          Action:
             - "s3:PutObject" 
             - "s3:PutObjectAcl" 
          Resource:
            Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - "${self:service}-music-bucket"
                - "/*"
  httpApi:
    cors:
      allowedOrigins:
        - "*" # Dozvoljava POST metodu i Preflight OPTIONS metod
      allowedMethods:
        - "PUT"
        - "GET"
        - "POST"
        - "OPTIONS" # Dozvoljava slanje Content-Type i Authorization headera (potrebno za JSON i JWT)
      allowedHeaders:
        - "Content-Type"
        - "Authorization"
      maxAge: 600 # Opcionalno: Keširanje preflight odgovora na 10 minuta (600 sekundi)
    authorizers:
      # bouncer:
      #     identitySource: $request.header.Authorization
      #     issuerUrl:
      #       Fn::sub: https://cognito-idp.${self:provider.region}.amazonaws.com/${CognitoUserPool}
      #     audience:
      #       - !Ref CognitoUserPoolClientWeb
      # Authorizer - ne dozvoljava pristup lambda funkcijama ako je access token validan!
      cognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: !Sub "https://cognito-idp.${self:provider.region}.amazonaws.com/${CognitoUserPool}"
        audience:
          - !Ref CognitoUserPoolClientWeb

functions:
  preRegistration:
    handler: handlers/auth.preSignUp
    events:
      - cognitoUserPool:
          pool: MapsterUserPool
          trigger: PreSignUp

  postConfirmation:
    handler: handlers/auth.postConfirmation
    events:
      - cognitoUserPool:
          pool: MapsterUserPool
          trigger: PostConfirmation

  createArtist:
    handler: handlers.artist-creation.lambda_handler
    events:
      - httpApi:
          path: /artists
          method: post

  filterHandler:
    handler: handlers.filter.filter_handler
    events:
      - httpApi:
          path: /filter
          method: get
          cors: true

  getArtists:
    handler: handlers.get_artists.lambda_handler
    events:
      - httpApi:
          path: /artists
          method: get

  getAlbums:
    handler: handlers.get_album.lambda_handler
    events:
      - httpApi:
          path: /albums
          method: get


  uploadMusic:
    handler: handlers/upload_music.lambda_handler
    events:
      - httpApi:
          path: /music/metadata
          method: post
          cors: true

  getPresignedUrl:
    handler: handlers/get_presigned_url.lambda_handler
    events:
      - httpApi:
          path: /music/presigned
          method: post
          cors: true

  createAlbum:
    handler: handlers.create_album.lambda_handler
    events:
      - httpApi:
          path: /albums
          method: post


resources:
  Resources:
    ArtistsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-artists
        AttributeDefinitions:
          - AttributeName: artistId
            AttributeType: S
        KeySchema:
          - AttributeName: artistId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    AlbumsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-albums
        AttributeDefinitions:
          - AttributeName: genre
            AttributeType: S
          - AttributeName: albumId
            AttributeType: S
        KeySchema:
          - AttributeName: genre
            KeyType: HASH
          - AttributeName: albumId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST


    MusicS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-music-bucket
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                 - '*'
              AllowedMethods:
                - PUT # KRITIČNO: Dozvoljavamo PUT za upload fajla
                - GET
                - POST
              AllowedOrigins:
               - '*' # Dozvolite pristup sa svih domena
              MaxAge: 3000


    MusicFilesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-music-files
        AttributeDefinitions:
          - AttributeName: musicId
            AttributeType: S
        KeySchema:
          - AttributeName: musicId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    MusicMetaDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-music-meta
        AttributeDefinitions:
          - AttributeName: musicId
            AttributeType: S
        KeySchema:
          - AttributeName: musicId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: MapsterUserPool
        UsernameAttributes: [email]
        AutoVerifiedAttributes: [email]
        #        SelfSignUpEnabled: true
        #        AccountRecoverySetting:
        #          RecoveryMechanisms: []

        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false

        Schema:
          - Name: given_name
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: family_name
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: false
          - Name: birthdate
            AttributeDataType: String
            Required: true
            Mutable: true

        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: true
            RequireUppercase: false
            RequireNumbers: false
            RequireSymbols: false

    AdminGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: Admin
        UserPoolId: !Ref CognitoUserPool
        Description: "Mapster administrators group"
        Precedence: 1

    UserGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: User
        UserPoolId: !Ref CognitoUserPool
        Description: "Mapster regular users group"
        Precedence: 10

    CognitoUserPoolClientWeb:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: MapsterWebClient
        UserPoolId: !Ref CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    #endregion
