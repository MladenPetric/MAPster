# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: petardragicevic
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: app
# "service" is the name of this project. This will also be added to your AWS resource names.
service: back

provider:
  name: aws
  runtime: python3.12
  # Uncomment to easily set up a custom domain. Read the docs for more details:
  # https://www.serverless.com/framework/docs/providers/aws/guide/domains
  # domain: api.example.com

functions:
  preRegistration:
    handler: handlers/auth.preSignUp
    events:
      - cognitoUserPool:
          pool: MapsterUserPool
          trigger: PreSignUp

  postConfirmation:
    handler: handlers/auth.postConfirmation
    events:
      - cognitoUserPool:
          pool: MapsterUserPool
          trigger: PostConfirmation

resources:
  Resources:
    #region Cognito

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: MapsterUserPool
        UsernameAttributes: [username]
        AutoVerifiedAttributes: []
        SelfSignUpEnabled: true
        AccountRecoverySetting:
          RecoveryMechanisms: []

        Schema:
          - Name: given_name
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: family_name
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: false
          - Name: birthdate
            AttributeDataType: String
            Required: true
            Mutable: true

        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: true
            RequireUppercase: false
            RequireNumbers: false
            RequireSymbols: false

    AdminGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: Admin
        UserPoolId: !Ref CognitoUserPool
        Description: "Mapster administrators group"
        Precedence: 1

    UserGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: User
        UserPoolId: !Ref CognitoUserPool
        Description: "Mapster regular users group"
        Precedence: 10

    CognitoUserPoolClientWeb:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: MapsterWebClient
        UserPoolId: !ref CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - USER_SRP_AUTH
          - USER_PASSWORD_AUTH
          - REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: true

    #endregion
