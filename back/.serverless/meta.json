{
  "C:\\Users\\Petar\\Desktop\\OBLAK\\MAPster\\back\\serverless.yml": {
    "versionFramework": "4.22.0",
    "servicePath": "C:\\Users\\Petar\\Desktop\\OBLAK\\MAPster\\back\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "app": "app",
      "service": "back",
      "provider": {
        "name": "aws",
        "runtime": "python3.12",
        "region": "eu-central-1",
        "environment": {
          "ARTISTS_TABLE": "back-artists",
          "MUSIC_BUCKET": "back-music-bucket",
          "MUSIC_FILES_TABLE": "back-music-files",
          "MUSIC_META_TABLE": "back-music-meta",
          "ALBUMS_TABLE": "back-albums"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:PutItem",
                  "dynamodb:Scan",
                  "dynamodb:GetItem",
                  "dynamodb:Query",
                  "dynamodb:UpdateItem"
                ],
                "Resource": [
                  "arn:aws:dynamodb:eu-central-1:*:table/back-artists",
                  "arn:aws:dynamodb:eu-central-1:*:table/back-albums",
                  "arn:aws:dynamodb:eu-central-1:*:table/back-music-files",
                  "arn:aws:dynamodb:eu-central-1:*:table/back-music-meta",
                  "arn:aws:dynamodb:eu-central-1:*:table/back-albums/index/albumId-index"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:PutObject",
                  "s3:PutObjectAcl",
                  "s3:GetObject"
                ],
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      "back-music-bucket",
                      "/*"
                    ]
                  ]
                }
              },
              {
                "Effect": "Allow",
                "Action": [
                  "cognito-idp:AdminAddUserToGroup",
                  "cognito-idp:ListUsers"
                ],
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "CognitoUserPool",
                      "Arn"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "httpApi": {
          "cors": {
            "allowedOrigins": [
              "*"
            ],
            "allowedMethods": [
              "PUT",
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "OPTIONS"
            ],
            "allowedHeaders": [
              "Content-Type",
              "Authorization"
            ],
            "maxAge": 600
          },
          "authorizers": {
            "cognitoAuthorizer": {
              "type": "jwt",
              "identitySource": "$request.header.Authorization",
              "issuerUrl": {
                "Fn::Sub": "https://cognito-idp.eu-central-1.amazonaws.com/${CognitoUserPool}"
              },
              "audience": [
                {
                  "Ref": "CognitoUserPoolClientWeb"
                }
              ]
            }
          }
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "PreRegistrationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-preRegistration"
              }
            },
            "PostConfirmationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-postConfirmation"
              }
            },
            "CreateArtistLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-createArtist"
              }
            },
            "FilterHandlerLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-filterHandler"
              }
            },
            "GetSongsByAlbumLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-getSongsByAlbum"
              }
            },
            "GetSongsByArtistLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-getSongsByArtist"
              }
            },
            "GetUnderscorealbumUnderscorebyUnderscoreidLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-get_album_by_id"
              }
            },
            "GetArtistByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-getArtistById"
              }
            },
            "GetArtistsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-getArtists"
              }
            },
            "GetAlbumsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-getAlbums"
              }
            },
            "UploadMusicLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-uploadMusic"
              }
            },
            "GetPresignedUrlLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-getPresignedUrl"
              }
            },
            "CreateAlbumLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-createAlbum"
              }
            },
            "GetAllMusicLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-getAllMusic"
              }
            },
            "SubscribeUserLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-subscribeUser"
              }
            },
            "CreateNotificationLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-createNotification"
              }
            },
            "GetUserNotificationsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/back-dev-getUserNotifications"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "back",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/back-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/back-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:PutItem",
                            "dynamodb:Scan",
                            "dynamodb:GetItem",
                            "dynamodb:Query",
                            "dynamodb:UpdateItem"
                          ],
                          "Resource": [
                            "arn:aws:dynamodb:eu-central-1:*:table/back-artists",
                            "arn:aws:dynamodb:eu-central-1:*:table/back-albums",
                            "arn:aws:dynamodb:eu-central-1:*:table/back-music-files",
                            "arn:aws:dynamodb:eu-central-1:*:table/back-music-meta",
                            "arn:aws:dynamodb:eu-central-1:*:table/back-albums/index/albumId-index"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:PutObject",
                            "s3:PutObjectAcl",
                            "s3:GetObject"
                          ],
                          "Resource": {
                            "Fn::Join": [
                              "",
                              [
                                "arn:aws:s3:::",
                                "back-music-bucket",
                                "/*"
                              ]
                            ]
                          }
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "cognito-idp:AdminAddUserToGroup",
                            "cognito-idp:ListUsers"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "CognitoUserPool",
                                "Arn"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "back",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "PreRegistrationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers.auth.preSignUp",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-preRegistration",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": "back-music-meta",
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PreRegistrationLogGroup"
              ]
            },
            "PostConfirmationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers.auth.postConfirmation",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-postConfirmation",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": "back-music-meta",
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "PostConfirmationLogGroup"
              ]
            },
            "CreateArtistLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers.artist-creation.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-createArtist",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": "back-music-meta",
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateArtistLogGroup"
              ]
            },
            "FilterHandlerLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers.filter.filter_handler",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-filterHandler",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": "back-music-meta",
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "FilterHandlerLogGroup"
              ]
            },
            "GetSongsByAlbumLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers.get_songs_by_album.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-getSongsByAlbum",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": {
                      "Ref": "MusicMetaDynamoDBTable"
                    },
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetSongsByAlbumLogGroup"
              ]
            },
            "GetSongsByArtistLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers.get_songs_by_artist.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-getSongsByArtist",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": {
                      "Ref": "MusicMetaDynamoDBTable"
                    },
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetSongsByArtistLogGroup"
              ]
            },
            "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers.get_album_by_id.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-get_album_by_id",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": "back-music-meta",
                    "ALBUMS_TABLE": {
                      "Ref": "AlbumsDynamoDBTable"
                    }
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUnderscorealbumUnderscorebyUnderscoreidLogGroup"
              ]
            },
            "GetArtistByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers.get_artist_by_id.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-getArtistById",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": {
                      "Ref": "ArtistsDynamoDBTable"
                    },
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": "back-music-meta",
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetArtistByIdLogGroup"
              ]
            },
            "GetArtistsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers.get_artists.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-getArtists",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": "back-music-meta",
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetArtistsLogGroup"
              ]
            },
            "GetAlbumsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers.get_album.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-getAlbums",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": "back-music-meta",
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAlbumsLogGroup"
              ]
            },
            "UploadMusicLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers/upload_music.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-uploadMusic",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": "back-music-meta",
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UploadMusicLogGroup"
              ]
            },
            "GetPresignedUrlLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers/get_presigned_url.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-getPresignedUrl",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": "back-music-meta",
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetPresignedUrlLogGroup"
              ]
            },
            "CreateAlbumLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers.create_album.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-createAlbum",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": "back-music-meta",
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateAlbumLogGroup"
              ]
            },
            "GetAllMusicLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers.get_music.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-getAllMusic",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": "back-music-meta",
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllMusicLogGroup"
              ]
            },
            "SubscribeUserLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers.subscribe_user.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-subscribeUser",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": "back-music-meta",
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "SubscribeUserLogGroup"
              ]
            },
            "CreateNotificationLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers.create_notifications.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-createNotification",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": "back-music-meta",
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateNotificationLogGroup"
              ]
            },
            "GetUserNotificationsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                  "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
                },
                "Handler": "handlers.get_user_notifications.lambda_handler",
                "Runtime": "python3.12",
                "FunctionName": "back-dev-getUserNotifications",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "ARTISTS_TABLE": "back-artists",
                    "MUSIC_BUCKET": "back-music-bucket",
                    "MUSIC_FILES_TABLE": "back-music-files",
                    "MUSIC_META_TABLE": "back-music-meta",
                    "ALBUMS_TABLE": "back-albums"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserNotificationsLogGroup"
              ]
            },
            "PreRegistrationLambdaVersionZvktGBPn4naTzBHLPl6BBTE7TCsJH8Xd4AoKC6dCESw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PreRegistrationLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "PostConfirmationLambdaVersionJHgPBWkjh7rpxakfR0T9PZWrME1vlsXQ8J7WsTvXud4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "PostConfirmationLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "CreateArtistLambdaVersionZfalFaXX4Qx6HlEthm67NvqnUJc4iKgfvCTbPyIaNI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateArtistLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "FilterHandlerLambdaVersionHxx45CfS7Bd7xeOSmMQl8ySrgqRWfw5EnVX1EvkHv8c": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "FilterHandlerLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "GetSongsByAlbumLambdaVersionWoUMc7VjlnYEekWlhomUrQ023ppvzveV6mJy0XUv8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetSongsByAlbumLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "GetSongsByArtistLambdaVersionZ3zB2LFDUzg8eRDqd2O1oPZCXSz5VAtUDJTZqyniG0U": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetSongsByArtistLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "GetUnderscorealbumUnderscorebyUnderscoreidLambdaVersionpnMwxJVlVYdIeIWlqMMIg71S5wVcgNes7fRLTv2HEM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "GetArtistByIdLambdaVersions3NUfhDSP5wIXu0FhmA0IGzTouuhrkpnao7Iq98XIg8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetArtistByIdLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "GetArtistsLambdaVersionze1IdBmFFsqvAHuw1xP7SihE2LzG5EDo7l2qRN4Y": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetArtistsLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "GetAlbumsLambdaVersionu3ZwETCax5vqo6hyZv77alcdGd9fad9XyaPYfyZss": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAlbumsLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "UploadMusicLambdaVersionkEgBlJCLg1uxMFvdzgljipksggPdvg5Kb1tjp1hKU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UploadMusicLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "GetPresignedUrlLambdaVersionc5sig7cIXqxvawixQJ1V9nEskC8Ax5cMnl6FK4JN4": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetPresignedUrlLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "CreateAlbumLambdaVersionXeCvkCI6RiS0cVFkShiMsaZ9X9UHfElAq62Gr5msCw": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateAlbumLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "GetAllMusicLambdaVersion2hVbZk7a4AxSNFthFwoOUY0YttLEeq1b10y1R3URGe8": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllMusicLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "SubscribeUserLambdaVersionW5NRIDmevPVgZ5RCmU6eLs7W2pnoWLOMY2UyZCiM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "SubscribeUserLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "CreateNotificationLambdaVersion6YrzYkhkrtfIere6bfZSYxO44ivquW4qYqtTEJpA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateNotificationLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "GetUserNotificationsLambdaVersionn3qMY7F4R4CufZYt9szKkfkk7bbsIgrbjWWEgIqzCc": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserNotificationsLambdaFunction"
                },
                "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
              }
            },
            "CognitoUserPoolMapsterUserPool": {
              "Type": "AWS::Cognito::UserPool",
              "Properties": {
                "UserPoolName": "MapsterUserPool",
                "LambdaConfig": {
                  "PreSignUp": {
                    "Fn::GetAtt": [
                      "PreRegistrationLambdaFunction",
                      "Arn"
                    ]
                  },
                  "PostConfirmation": {
                    "Fn::GetAtt": [
                      "PostConfirmationLambdaFunction",
                      "Arn"
                    ]
                  }
                }
              },
              "DependsOn": [
                "PreRegistrationLambdaFunction",
                "PostConfirmationLambdaFunction"
              ]
            },
            "PreRegistrationLambdaPermissionCognitoUserPoolMapsterUserPoolTriggerSourcePreSignUp": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PreRegistrationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "cognito-idp.amazonaws.com",
                "SourceArn": {
                  "Fn::GetAtt": [
                    "CognitoUserPoolMapsterUserPool",
                    "Arn"
                  ]
                }
              }
            },
            "PostConfirmationLambdaPermissionCognitoUserPoolMapsterUserPoolTriggerSourcePostConfirmation": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "PostConfirmationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "cognito-idp.amazonaws.com",
                "SourceArn": {
                  "Fn::GetAtt": [
                    "CognitoUserPoolMapsterUserPool",
                    "Arn"
                  ]
                }
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-back",
                "ProtocolType": "HTTP",
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "Content-Type",
                    "Authorization"
                  ],
                  "AllowMethods": [
                    "PUT",
                    "GET",
                    "POST",
                    "DELETE",
                    "OPTIONS"
                  ],
                  "AllowOrigins": [
                    "*"
                  ],
                  "MaxAge": 600
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "HttpApiAuthorizerCognitoAuthorizer": {
              "Type": "AWS::ApiGatewayV2::Authorizer",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "Name": "cognitoAuthorizer",
                "IdentitySource": [
                  "$request.header.Authorization"
                ],
                "AuthorizerType": "JWT",
                "JwtConfiguration": {
                  "Audience": [
                    {
                      "Ref": "CognitoUserPoolClientWeb"
                    }
                  ],
                  "Issuer": {
                    "Fn::Sub": "https://cognito-idp.eu-central-1.amazonaws.com/${CognitoUserPool}"
                  }
                }
              }
            },
            "CreateArtistLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateArtistLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateArtist": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateArtistLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostArtists": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /artists",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateArtist"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateArtist"
            },
            "FilterHandlerLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "FilterHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationFilterHandler": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "FilterHandlerLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetFilter": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /filter",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationFilterHandler"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationFilterHandler"
            },
            "GetSongsByAlbumLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetSongsByAlbumLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetSongsByAlbum": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetSongsByAlbumLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetSongsAlbumAlbumidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /songs/album/{albumId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetSongsByAlbum"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetSongsByAlbum"
            },
            "GetSongsByArtistLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetSongsByArtistLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetSongsByArtist": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetSongsByArtistLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetSongsArtistArtistidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /songs/artist/{artistId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetSongsByArtist"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetSongsByArtist"
            },
            "GetUnderscorealbumUnderscorebyUnderscoreidLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetUnderscorealbumUnderscorebyUnderscoreid": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetAlbumsAlbumidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /albums/{albumId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetUnderscorealbumUnderscorebyUnderscoreid"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetUnderscorealbumUnderscorebyUnderscoreid"
            },
            "GetArtistByIdLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetArtistByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetArtistById": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetArtistByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetArtistsArtistidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /artists/{artistId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetArtistById"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetArtistById"
            },
            "GetArtistsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetArtistsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetArtists": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetArtistsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetArtists": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /artists",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetArtists"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetArtists"
            },
            "GetAlbumsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAlbumsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetAlbums": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetAlbumsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetAlbums": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /albums",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetAlbums"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetAlbums"
            },
            "UploadMusicLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UploadMusicLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUploadMusic": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UploadMusicLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostMusicMetadata": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /music/metadata",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUploadMusic"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUploadMusic"
            },
            "GetPresignedUrlLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetPresignedUrlLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetPresignedUrl": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetPresignedUrlLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostMusicPresigned": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /music/presigned",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetPresignedUrl"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetPresignedUrl"
            },
            "CreateAlbumLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateAlbumLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateAlbum": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateAlbumLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostAlbums": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /albums",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateAlbum"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateAlbum"
            },
            "GetAllMusicLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllMusicLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetAllMusic": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetAllMusicLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetMusicGetall": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /music/getAll",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetAllMusic"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetAllMusic"
            },
            "SubscribeUserLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "SubscribeUserLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationSubscribeUser": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "SubscribeUserLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostSubscribe": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /subscribe",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationSubscribeUser"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationSubscribeUser"
            },
            "CreateNotificationLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateNotificationLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreateNotification": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateNotificationLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostNotify": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /notify",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreateNotification"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreateNotification"
            },
            "GetUserNotificationsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserNotificationsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetUserNotifications": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetUserNotificationsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetGetusernotifications": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /getUserNotifications",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetUserNotifications"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetUserNotifications"
            },
            "ArtistsDynamoDBTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "back-artists",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "artistId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "artistId",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "AlbumsDynamoDBTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "back-albums",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "genre",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "albumId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "genre",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "albumId",
                    "KeyType": "RANGE"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST",
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "albumId-index",
                    "KeySchema": [
                      {
                        "AttributeName": "albumId",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ]
              }
            },
            "MusicS3Bucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketName": "back-music-bucket",
                "CorsConfiguration": {
                  "CorsRules": [
                    {
                      "AllowedHeaders": [
                        "*"
                      ],
                      "AllowedMethods": [
                        "PUT",
                        "GET",
                        "POST"
                      ],
                      "AllowedOrigins": [
                        "*"
                      ],
                      "MaxAge": 3000
                    }
                  ]
                }
              }
            },
            "MusicFilesDynamoDBTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "back-music-files",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "musicId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "musicId",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "MusicMetaDynamoDBTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "back-music-meta",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "musicId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "musicId",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "SubscriptionsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "back-subscriptions",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "targetId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "targetId",
                    "KeyType": "RANGE"
                  }
                ]
              }
            },
            "NotificationsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "back-notifications",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "userId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "notificationId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "notificationId",
                    "KeyType": "RANGE"
                  }
                ]
              }
            },
            "CognitoUserPool": {
              "Type": "AWS::Cognito::UserPool",
              "Properties": {
                "UserPoolName": "MapsterUserPool",
                "UsernameAttributes": [
                  "email"
                ],
                "AutoVerifiedAttributes": [],
                "AdminCreateUserConfig": {
                  "AllowAdminCreateUserOnly": false
                },
                "Schema": [
                  {
                    "Name": "given_name",
                    "AttributeDataType": "String",
                    "Required": true,
                    "Mutable": true
                  },
                  {
                    "Name": "family_name",
                    "AttributeDataType": "String",
                    "Required": true,
                    "Mutable": true
                  },
                  {
                    "Name": "email",
                    "AttributeDataType": "String",
                    "Required": true,
                    "Mutable": false
                  },
                  {
                    "Name": "birthdate",
                    "AttributeDataType": "String",
                    "Required": true,
                    "Mutable": true
                  }
                ],
                "Policies": {
                  "PasswordPolicy": "<REDACTED>"
                }
              }
            },
            "AdminGroup": {
              "Type": "AWS::Cognito::UserPoolGroup",
              "Properties": {
                "GroupName": "Admin",
                "UserPoolId": {
                  "Ref": "CognitoUserPool"
                },
                "Description": "Mapster administrators group",
                "Precedence": 1
              }
            },
            "UserGroup": {
              "Type": "AWS::Cognito::UserPoolGroup",
              "Properties": {
                "GroupName": "User",
                "UserPoolId": {
                  "Ref": "CognitoUserPool"
                },
                "Description": "Mapster regular users group",
                "Precedence": 10
              }
            },
            "CognitoUserPoolClientWeb": {
              "Type": "AWS::Cognito::UserPoolClient",
              "Properties": {
                "ClientName": "MapsterWebClient",
                "UserPoolId": {
                  "Ref": "CognitoUserPool"
                },
                "GenerateSecret": "<REDACTED>",
                "ExplicitAuthFlows": [
                  "ALLOW_USER_SRP_AUTH",
                  "ALLOW_USER_PASSWORD_AUTH",
                  "ALLOW_REFRESH_TOKEN_AUTH"
                ],
                "PreventUserExistenceErrors": "ENABLED"
              }
            },
            "WebHostingBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketName": "back-website-bucket",
                "WebsiteConfiguration": {
                  "IndexDocument": "index.html",
                  "ErrorDocument": "index.html"
                },
                "PublicAccessBlockConfiguration": {
                  "BlockPublicAcls": false,
                  "BlockPublicPolicy": false,
                  "IgnorePublicAcls": false,
                  "RestrictPublicBuckets": false
                }
              }
            },
            "WebHostingBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "WebHostingBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": "*",
                      "Action": "s3:GetObject",
                      "Resource": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:aws:s3:::",
                            {
                              "Ref": "WebHostingBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "Export": {
                "Name": "sls-back-dev-ServerlessDeploymentBucketName"
              }
            },
            "PreRegistrationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PreRegistrationLambdaVersionZvktGBPn4naTzBHLPl6BBTE7TCsJH8Xd4AoKC6dCESw"
              },
              "Export": {
                "Name": "sls-back-dev-PreRegistrationLambdaFunctionQualifiedArn"
              }
            },
            "PostConfirmationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "PostConfirmationLambdaVersionJHgPBWkjh7rpxakfR0T9PZWrME1vlsXQ8J7WsTvXud4"
              },
              "Export": {
                "Name": "sls-back-dev-PostConfirmationLambdaFunctionQualifiedArn"
              }
            },
            "CreateArtistLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateArtistLambdaVersionZfalFaXX4Qx6HlEthm67NvqnUJc4iKgfvCTbPyIaNI"
              },
              "Export": {
                "Name": "sls-back-dev-CreateArtistLambdaFunctionQualifiedArn"
              }
            },
            "FilterHandlerLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "FilterHandlerLambdaVersionHxx45CfS7Bd7xeOSmMQl8ySrgqRWfw5EnVX1EvkHv8c"
              },
              "Export": {
                "Name": "sls-back-dev-FilterHandlerLambdaFunctionQualifiedArn"
              }
            },
            "GetSongsByAlbumLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetSongsByAlbumLambdaVersionWoUMc7VjlnYEekWlhomUrQ023ppvzveV6mJy0XUv8"
              },
              "Export": {
                "Name": "sls-back-dev-GetSongsByAlbumLambdaFunctionQualifiedArn"
              }
            },
            "GetSongsByArtistLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetSongsByArtistLambdaVersionZ3zB2LFDUzg8eRDqd2O1oPZCXSz5VAtUDJTZqyniG0U"
              },
              "Export": {
                "Name": "sls-back-dev-GetSongsByArtistLambdaFunctionQualifiedArn"
              }
            },
            "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUnderscorealbumUnderscorebyUnderscoreidLambdaVersionpnMwxJVlVYdIeIWlqMMIg71S5wVcgNes7fRLTv2HEM"
              },
              "Export": {
                "Name": "sls-back-dev-GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunctionQualifiedArn"
              }
            },
            "GetArtistByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetArtistByIdLambdaVersions3NUfhDSP5wIXu0FhmA0IGzTouuhrkpnao7Iq98XIg8"
              },
              "Export": {
                "Name": "sls-back-dev-GetArtistByIdLambdaFunctionQualifiedArn"
              }
            },
            "GetArtistsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetArtistsLambdaVersionze1IdBmFFsqvAHuw1xP7SihE2LzG5EDo7l2qRN4Y"
              },
              "Export": {
                "Name": "sls-back-dev-GetArtistsLambdaFunctionQualifiedArn"
              }
            },
            "GetAlbumsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAlbumsLambdaVersionu3ZwETCax5vqo6hyZv77alcdGd9fad9XyaPYfyZss"
              },
              "Export": {
                "Name": "sls-back-dev-GetAlbumsLambdaFunctionQualifiedArn"
              }
            },
            "UploadMusicLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UploadMusicLambdaVersionkEgBlJCLg1uxMFvdzgljipksggPdvg5Kb1tjp1hKU"
              },
              "Export": {
                "Name": "sls-back-dev-UploadMusicLambdaFunctionQualifiedArn"
              }
            },
            "GetPresignedUrlLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetPresignedUrlLambdaVersionc5sig7cIXqxvawixQJ1V9nEskC8Ax5cMnl6FK4JN4"
              },
              "Export": {
                "Name": "sls-back-dev-GetPresignedUrlLambdaFunctionQualifiedArn"
              }
            },
            "CreateAlbumLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateAlbumLambdaVersionXeCvkCI6RiS0cVFkShiMsaZ9X9UHfElAq62Gr5msCw"
              },
              "Export": {
                "Name": "sls-back-dev-CreateAlbumLambdaFunctionQualifiedArn"
              }
            },
            "GetAllMusicLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllMusicLambdaVersion2hVbZk7a4AxSNFthFwoOUY0YttLEeq1b10y1R3URGe8"
              },
              "Export": {
                "Name": "sls-back-dev-GetAllMusicLambdaFunctionQualifiedArn"
              }
            },
            "SubscribeUserLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "SubscribeUserLambdaVersionW5NRIDmevPVgZ5RCmU6eLs7W2pnoWLOMY2UyZCiM"
              },
              "Export": {
                "Name": "sls-back-dev-SubscribeUserLambdaFunctionQualifiedArn"
              }
            },
            "CreateNotificationLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateNotificationLambdaVersion6YrzYkhkrtfIere6bfZSYxO44ivquW4qYqtTEJpA"
              },
              "Export": {
                "Name": "sls-back-dev-CreateNotificationLambdaFunctionQualifiedArn"
              }
            },
            "GetUserNotificationsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserNotificationsLambdaVersionn3qMY7F4R4CufZYt9szKkfkk7bbsIgrbjWWEgIqzCc"
              },
              "Export": {
                "Name": "sls-back-dev-GetUserNotificationsLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-back-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-back-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "preRegistration": {
          "handler": "handlers.auth.preSignUp",
          "events": [
            {
              "cognitoUserPool": {
                "pool": "MapsterUserPool",
                "trigger": "PreSignUp"
              }
            }
          ],
          "name": "back-dev-preRegistration",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "PreRegistrationLambdaVersionZvktGBPn4naTzBHLPl6BBTE7TCsJH8Xd4AoKC6dCESw"
        },
        "postConfirmation": {
          "handler": "handlers.auth.postConfirmation",
          "events": [
            {
              "cognitoUserPool": {
                "pool": "MapsterUserPool",
                "trigger": "PostConfirmation"
              }
            }
          ],
          "name": "back-dev-postConfirmation",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "PostConfirmationLambdaVersionJHgPBWkjh7rpxakfR0T9PZWrME1vlsXQ8J7WsTvXud4"
        },
        "createArtist": {
          "handler": "handlers.artist-creation.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/artists",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/artists"
            }
          ],
          "name": "back-dev-createArtist",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "CreateArtistLambdaVersionZfalFaXX4Qx6HlEthm67NvqnUJc4iKgfvCTbPyIaNI"
        },
        "filterHandler": {
          "handler": "handlers.filter.filter_handler",
          "events": [
            {
              "httpApi": {
                "path": "/filter",
                "method": "get",
                "request": {
                  "parameters": {
                    "querystrings": {
                      "genre": true
                    }
                  }
                }
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/filter"
            }
          ],
          "name": "back-dev-filterHandler",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "FilterHandlerLambdaVersionHxx45CfS7Bd7xeOSmMQl8ySrgqRWfw5EnVX1EvkHv8c"
        },
        "getSongsByAlbum": {
          "handler": "handlers.get_songs_by_album.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/songs/album/{albumId}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/songs/album/{albumId}"
            }
          ],
          "environment": {
            "MUSIC_META_TABLE": {
              "Ref": "MusicMetaDynamoDBTable"
            }
          },
          "name": "back-dev-getSongsByAlbum",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "GetSongsByAlbumLambdaVersionWoUMc7VjlnYEekWlhomUrQ023ppvzveV6mJy0XUv8"
        },
        "getSongsByArtist": {
          "handler": "handlers.get_songs_by_artist.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/songs/artist/{artistId}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/songs/artist/{artistId}"
            }
          ],
          "environment": {
            "MUSIC_META_TABLE": {
              "Ref": "MusicMetaDynamoDBTable"
            }
          },
          "name": "back-dev-getSongsByArtist",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "GetSongsByArtistLambdaVersionZ3zB2LFDUzg8eRDqd2O1oPZCXSz5VAtUDJTZqyniG0U"
        },
        "get_album_by_id": {
          "handler": "handlers.get_album_by_id.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/albums/{albumId}",
                "method": "get",
                "cors": true
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/albums/{albumId}"
            }
          ],
          "environment": {
            "ALBUMS_TABLE": {
              "Ref": "AlbumsDynamoDBTable"
            }
          },
          "name": "back-dev-get_album_by_id",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "GetUnderscorealbumUnderscorebyUnderscoreidLambdaVersionpnMwxJVlVYdIeIWlqMMIg71S5wVcgNes7fRLTv2HEM"
        },
        "getArtistById": {
          "handler": "handlers.get_artist_by_id.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/artists/{artistId}",
                "method": "get",
                "cors": true
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/artists/{artistId}"
            }
          ],
          "environment": {
            "ARTISTS_TABLE": {
              "Ref": "ArtistsDynamoDBTable"
            }
          },
          "name": "back-dev-getArtistById",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "GetArtistByIdLambdaVersions3NUfhDSP5wIXu0FhmA0IGzTouuhrkpnao7Iq98XIg8"
        },
        "getArtists": {
          "handler": "handlers.get_artists.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/artists",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/artists"
            }
          ],
          "name": "back-dev-getArtists",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "GetArtistsLambdaVersionze1IdBmFFsqvAHuw1xP7SihE2LzG5EDo7l2qRN4Y"
        },
        "getAlbums": {
          "handler": "handlers.get_album.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/albums",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/albums"
            }
          ],
          "name": "back-dev-getAlbums",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "GetAlbumsLambdaVersionu3ZwETCax5vqo6hyZv77alcdGd9fad9XyaPYfyZss"
        },
        "uploadMusic": {
          "handler": "handlers/upload_music.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/music/metadata",
                "method": "post",
                "cors": true
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/music/metadata"
            }
          ],
          "name": "back-dev-uploadMusic",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "UploadMusicLambdaVersionkEgBlJCLg1uxMFvdzgljipksggPdvg5Kb1tjp1hKU"
        },
        "getPresignedUrl": {
          "handler": "handlers/get_presigned_url.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/music/presigned",
                "method": "post",
                "cors": true
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/music/presigned"
            }
          ],
          "name": "back-dev-getPresignedUrl",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "GetPresignedUrlLambdaVersionc5sig7cIXqxvawixQJ1V9nEskC8Ax5cMnl6FK4JN4"
        },
        "createAlbum": {
          "handler": "handlers.create_album.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/albums",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/albums"
            }
          ],
          "name": "back-dev-createAlbum",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "CreateAlbumLambdaVersionXeCvkCI6RiS0cVFkShiMsaZ9X9UHfElAq62Gr5msCw"
        },
        "getAllMusic": {
          "handler": "handlers.get_music.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/music/getAll",
                "method": "get",
                "cors": true
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/music/getAll"
            }
          ],
          "name": "back-dev-getAllMusic",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "GetAllMusicLambdaVersion2hVbZk7a4AxSNFthFwoOUY0YttLEeq1b10y1R3URGe8"
        },
        "subscribeUser": {
          "handler": "handlers.subscribe_user.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/subscribe",
                "method": "post",
                "cors": true
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/subscribe"
            }
          ],
          "name": "back-dev-subscribeUser",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "SubscribeUserLambdaVersionW5NRIDmevPVgZ5RCmU6eLs7W2pnoWLOMY2UyZCiM"
        },
        "createNotification": {
          "handler": "handlers.create_notifications.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/notify",
                "method": "post",
                "cors": true
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/notify"
            }
          ],
          "name": "back-dev-createNotification",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "CreateNotificationLambdaVersion6YrzYkhkrtfIere6bfZSYxO44ivquW4qYqtTEJpA"
        },
        "getUserNotifications": {
          "handler": "handlers.get_user_notifications.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/getUserNotifications",
                "method": "get",
                "cors": true
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/getUserNotifications"
            }
          ],
          "name": "back-dev-getUserNotifications",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "python3.12",
          "vpc": {},
          "versionLogicalId": "GetUserNotificationsLambdaVersionn3qMY7F4R4CufZYt9szKkfkk7bbsIgrbjWWEgIqzCc"
        }
      },
      "resources": {
        "Resources": {
          "ArtistsDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "back-artists",
              "AttributeDefinitions": [
                {
                  "AttributeName": "artistId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "artistId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "AlbumsDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "back-albums",
              "AttributeDefinitions": [
                {
                  "AttributeName": "genre",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "albumId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "genre",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "albumId",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "albumId-index",
                  "KeySchema": [
                    {
                      "AttributeName": "albumId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "MusicS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "back-music-bucket",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "PUT",
                      "GET",
                      "POST"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "MusicFilesDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "back-music-files",
              "AttributeDefinitions": [
                {
                  "AttributeName": "musicId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "musicId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "MusicMetaDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "back-music-meta",
              "AttributeDefinitions": [
                {
                  "AttributeName": "musicId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "musicId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "SubscriptionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "back-subscriptions",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "targetId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "targetId",
                  "KeyType": "RANGE"
                }
              ]
            }
          },
          "NotificationsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "back-notifications",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "notificationId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "notificationId",
                  "KeyType": "RANGE"
                }
              ]
            }
          },
          "CognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "MapsterUserPool",
              "UsernameAttributes": [
                "email"
              ],
              "AutoVerifiedAttributes": [],
              "AdminCreateUserConfig": {
                "AllowAdminCreateUserOnly": false
              },
              "Schema": [
                {
                  "Name": "given_name",
                  "AttributeDataType": "String",
                  "Required": true,
                  "Mutable": true
                },
                {
                  "Name": "family_name",
                  "AttributeDataType": "String",
                  "Required": true,
                  "Mutable": true
                },
                {
                  "Name": "email",
                  "AttributeDataType": "String",
                  "Required": true,
                  "Mutable": false
                },
                {
                  "Name": "birthdate",
                  "AttributeDataType": "String",
                  "Required": true,
                  "Mutable": true
                }
              ],
              "Policies": {
                "PasswordPolicy": "<REDACTED>"
              }
            }
          },
          "AdminGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "GroupName": "Admin",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "Description": "Mapster administrators group",
              "Precedence": 1
            }
          },
          "UserGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "GroupName": "User",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "Description": "Mapster regular users group",
              "Precedence": 10
            }
          },
          "CognitoUserPoolClientWeb": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "MapsterWebClient",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "GenerateSecret": "<REDACTED>",
              "ExplicitAuthFlows": [
                "ALLOW_USER_SRP_AUTH",
                "ALLOW_USER_PASSWORD_AUTH",
                "ALLOW_REFRESH_TOKEN_AUTH"
              ],
              "PreventUserExistenceErrors": "ENABLED"
            }
          },
          "WebHostingBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "back-website-bucket",
              "WebsiteConfiguration": {
                "IndexDocument": "index.html",
                "ErrorDocument": "index.html"
              },
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": false,
                "BlockPublicPolicy": false,
                "IgnorePublicAcls": false,
                "RestrictPublicBuckets": false
              }
            }
          },
          "WebHostingBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "WebHostingBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "WebHostingBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.12",
      "region": "eu-central-1",
      "environment": {
        "ARTISTS_TABLE": "back-artists",
        "MUSIC_BUCKET": "back-music-bucket",
        "MUSIC_FILES_TABLE": "back-music-files",
        "MUSIC_META_TABLE": "back-music-meta",
        "ALBUMS_TABLE": "back-albums"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:Query",
                "dynamodb:UpdateItem"
              ],
              "Resource": [
                "arn:aws:dynamodb:eu-central-1:*:table/back-artists",
                "arn:aws:dynamodb:eu-central-1:*:table/back-albums",
                "arn:aws:dynamodb:eu-central-1:*:table/back-music-files",
                "arn:aws:dynamodb:eu-central-1:*:table/back-music-meta",
                "arn:aws:dynamodb:eu-central-1:*:table/back-albums/index/albumId-index"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:GetObject"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    "back-music-bucket",
                    "/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "cognito-idp:AdminAddUserToGroup",
                "cognito-idp:ListUsers"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CognitoUserPool",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      },
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "*"
          ],
          "allowedMethods": [
            "PUT",
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "OPTIONS"
          ],
          "allowedHeaders": [
            "Content-Type",
            "Authorization"
          ],
          "maxAge": 600
        },
        "authorizers": {
          "cognitoAuthorizer": {
            "type": "jwt",
            "identitySource": "$request.header.Authorization",
            "issuerUrl": {
              "Fn::Sub": "https://cognito-idp.eu-central-1.amazonaws.com/${CognitoUserPool}"
            },
            "audience": [
              {
                "Ref": "CognitoUserPoolClientWeb"
              }
            ]
          }
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "PreRegistrationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-preRegistration"
            }
          },
          "PostConfirmationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-postConfirmation"
            }
          },
          "CreateArtistLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-createArtist"
            }
          },
          "FilterHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-filterHandler"
            }
          },
          "GetSongsByAlbumLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-getSongsByAlbum"
            }
          },
          "GetSongsByArtistLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-getSongsByArtist"
            }
          },
          "GetUnderscorealbumUnderscorebyUnderscoreidLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-get_album_by_id"
            }
          },
          "GetArtistByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-getArtistById"
            }
          },
          "GetArtistsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-getArtists"
            }
          },
          "GetAlbumsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-getAlbums"
            }
          },
          "UploadMusicLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-uploadMusic"
            }
          },
          "GetPresignedUrlLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-getPresignedUrl"
            }
          },
          "CreateAlbumLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-createAlbum"
            }
          },
          "GetAllMusicLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-getAllMusic"
            }
          },
          "SubscribeUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-subscribeUser"
            }
          },
          "CreateNotificationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-createNotification"
            }
          },
          "GetUserNotificationsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/back-dev-getUserNotifications"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "back",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/back-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/back-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PutItem",
                          "dynamodb:Scan",
                          "dynamodb:GetItem",
                          "dynamodb:Query",
                          "dynamodb:UpdateItem"
                        ],
                        "Resource": [
                          "arn:aws:dynamodb:eu-central-1:*:table/back-artists",
                          "arn:aws:dynamodb:eu-central-1:*:table/back-albums",
                          "arn:aws:dynamodb:eu-central-1:*:table/back-music-files",
                          "arn:aws:dynamodb:eu-central-1:*:table/back-music-meta",
                          "arn:aws:dynamodb:eu-central-1:*:table/back-albums/index/albumId-index"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:PutObject",
                          "s3:PutObjectAcl",
                          "s3:GetObject"
                        ],
                        "Resource": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:aws:s3:::",
                              "back-music-bucket",
                              "/*"
                            ]
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "cognito-idp:AdminAddUserToGroup",
                          "cognito-idp:ListUsers"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "CognitoUserPool",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "back",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "PreRegistrationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers.auth.preSignUp",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-preRegistration",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": "back-music-meta",
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PreRegistrationLogGroup"
            ]
          },
          "PostConfirmationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers.auth.postConfirmation",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-postConfirmation",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": "back-music-meta",
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PostConfirmationLogGroup"
            ]
          },
          "CreateArtistLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers.artist-creation.lambda_handler",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-createArtist",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": "back-music-meta",
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateArtistLogGroup"
            ]
          },
          "FilterHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers.filter.filter_handler",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-filterHandler",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": "back-music-meta",
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FilterHandlerLogGroup"
            ]
          },
          "GetSongsByAlbumLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers.get_songs_by_album.lambda_handler",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-getSongsByAlbum",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": {
                    "Ref": "MusicMetaDynamoDBTable"
                  },
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSongsByAlbumLogGroup"
            ]
          },
          "GetSongsByArtistLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers.get_songs_by_artist.lambda_handler",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-getSongsByArtist",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": {
                    "Ref": "MusicMetaDynamoDBTable"
                  },
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSongsByArtistLogGroup"
            ]
          },
          "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers.get_album_by_id.lambda_handler",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-get_album_by_id",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": "back-music-meta",
                  "ALBUMS_TABLE": {
                    "Ref": "AlbumsDynamoDBTable"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUnderscorealbumUnderscorebyUnderscoreidLogGroup"
            ]
          },
          "GetArtistByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers.get_artist_by_id.lambda_handler",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-getArtistById",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": {
                    "Ref": "ArtistsDynamoDBTable"
                  },
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": "back-music-meta",
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetArtistByIdLogGroup"
            ]
          },
          "GetArtistsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers.get_artists.lambda_handler",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-getArtists",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": "back-music-meta",
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetArtistsLogGroup"
            ]
          },
          "GetAlbumsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers.get_album.lambda_handler",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-getAlbums",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": "back-music-meta",
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAlbumsLogGroup"
            ]
          },
          "UploadMusicLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers/upload_music.lambda_handler",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-uploadMusic",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": "back-music-meta",
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UploadMusicLogGroup"
            ]
          },
          "GetPresignedUrlLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers/get_presigned_url.lambda_handler",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-getPresignedUrl",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": "back-music-meta",
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPresignedUrlLogGroup"
            ]
          },
          "CreateAlbumLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers.create_album.lambda_handler",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-createAlbum",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": "back-music-meta",
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateAlbumLogGroup"
            ]
          },
          "GetAllMusicLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers.get_music.lambda_handler",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-getAllMusic",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": "back-music-meta",
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllMusicLogGroup"
            ]
          },
          "SubscribeUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers.subscribe_user.lambda_handler",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-subscribeUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": "back-music-meta",
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SubscribeUserLogGroup"
            ]
          },
          "CreateNotificationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers.create_notifications.lambda_handler",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-createNotification",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": "back-music-meta",
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateNotificationLogGroup"
            ]
          },
          "GetUserNotificationsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
                "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
              },
              "Handler": "handlers.get_user_notifications.lambda_handler",
              "Runtime": "python3.12",
              "FunctionName": "back-dev-getUserNotifications",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ARTISTS_TABLE": "back-artists",
                  "MUSIC_BUCKET": "back-music-bucket",
                  "MUSIC_FILES_TABLE": "back-music-files",
                  "MUSIC_META_TABLE": "back-music-meta",
                  "ALBUMS_TABLE": "back-albums"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserNotificationsLogGroup"
            ]
          },
          "PreRegistrationLambdaVersionZvktGBPn4naTzBHLPl6BBTE7TCsJH8Xd4AoKC6dCESw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PreRegistrationLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "PostConfirmationLambdaVersionJHgPBWkjh7rpxakfR0T9PZWrME1vlsXQ8J7WsTvXud4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PostConfirmationLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "CreateArtistLambdaVersionZfalFaXX4Qx6HlEthm67NvqnUJc4iKgfvCTbPyIaNI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateArtistLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "FilterHandlerLambdaVersionHxx45CfS7Bd7xeOSmMQl8ySrgqRWfw5EnVX1EvkHv8c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "FilterHandlerLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "GetSongsByAlbumLambdaVersionWoUMc7VjlnYEekWlhomUrQ023ppvzveV6mJy0XUv8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSongsByAlbumLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "GetSongsByArtistLambdaVersionZ3zB2LFDUzg8eRDqd2O1oPZCXSz5VAtUDJTZqyniG0U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSongsByArtistLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "GetUnderscorealbumUnderscorebyUnderscoreidLambdaVersionpnMwxJVlVYdIeIWlqMMIg71S5wVcgNes7fRLTv2HEM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "GetArtistByIdLambdaVersions3NUfhDSP5wIXu0FhmA0IGzTouuhrkpnao7Iq98XIg8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetArtistByIdLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "GetArtistsLambdaVersionze1IdBmFFsqvAHuw1xP7SihE2LzG5EDo7l2qRN4Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetArtistsLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "GetAlbumsLambdaVersionu3ZwETCax5vqo6hyZv77alcdGd9fad9XyaPYfyZss": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAlbumsLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "UploadMusicLambdaVersionkEgBlJCLg1uxMFvdzgljipksggPdvg5Kb1tjp1hKU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UploadMusicLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "GetPresignedUrlLambdaVersionc5sig7cIXqxvawixQJ1V9nEskC8Ax5cMnl6FK4JN4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPresignedUrlLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "CreateAlbumLambdaVersionXeCvkCI6RiS0cVFkShiMsaZ9X9UHfElAq62Gr5msCw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateAlbumLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "GetAllMusicLambdaVersion2hVbZk7a4AxSNFthFwoOUY0YttLEeq1b10y1R3URGe8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllMusicLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "SubscribeUserLambdaVersionW5NRIDmevPVgZ5RCmU6eLs7W2pnoWLOMY2UyZCiM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SubscribeUserLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "CreateNotificationLambdaVersion6YrzYkhkrtfIere6bfZSYxO44ivquW4qYqtTEJpA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateNotificationLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "GetUserNotificationsLambdaVersionn3qMY7F4R4CufZYt9szKkfkk7bbsIgrbjWWEgIqzCc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserNotificationsLambdaFunction"
              },
              "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
            }
          },
          "CognitoUserPoolMapsterUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "MapsterUserPool",
              "LambdaConfig": {
                "PreSignUp": {
                  "Fn::GetAtt": [
                    "PreRegistrationLambdaFunction",
                    "Arn"
                  ]
                },
                "PostConfirmation": {
                  "Fn::GetAtt": [
                    "PostConfirmationLambdaFunction",
                    "Arn"
                  ]
                }
              }
            },
            "DependsOn": [
              "PreRegistrationLambdaFunction",
              "PostConfirmationLambdaFunction"
            ]
          },
          "PreRegistrationLambdaPermissionCognitoUserPoolMapsterUserPoolTriggerSourcePreSignUp": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PreRegistrationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "cognito-idp.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "CognitoUserPoolMapsterUserPool",
                  "Arn"
                ]
              }
            }
          },
          "PostConfirmationLambdaPermissionCognitoUserPoolMapsterUserPoolTriggerSourcePostConfirmation": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PostConfirmationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "cognito-idp.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "CognitoUserPoolMapsterUserPool",
                  "Arn"
                ]
              }
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-back",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowCredentials": "<REDACTED>",
                "AllowHeaders": [
                  "Content-Type",
                  "Authorization"
                ],
                "AllowMethods": [
                  "PUT",
                  "GET",
                  "POST",
                  "DELETE",
                  "OPTIONS"
                ],
                "AllowOrigins": [
                  "*"
                ],
                "MaxAge": 600
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "HttpApiAuthorizerCognitoAuthorizer": {
            "Type": "AWS::ApiGatewayV2::Authorizer",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "Name": "cognitoAuthorizer",
              "IdentitySource": [
                "$request.header.Authorization"
              ],
              "AuthorizerType": "JWT",
              "JwtConfiguration": {
                "Audience": [
                  {
                    "Ref": "CognitoUserPoolClientWeb"
                  }
                ],
                "Issuer": {
                  "Fn::Sub": "https://cognito-idp.eu-central-1.amazonaws.com/${CognitoUserPool}"
                }
              }
            }
          },
          "CreateArtistLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateArtistLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateArtist": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "CreateArtistLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostArtists": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /artists",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateArtist"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateArtist"
          },
          "FilterHandlerLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "FilterHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationFilterHandler": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "FilterHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetFilter": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /filter",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationFilterHandler"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationFilterHandler"
          },
          "GetSongsByAlbumLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSongsByAlbumLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetSongsByAlbum": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetSongsByAlbumLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetSongsAlbumAlbumidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /songs/album/{albumId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetSongsByAlbum"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetSongsByAlbum"
          },
          "GetSongsByArtistLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSongsByArtistLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetSongsByArtist": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetSongsByArtistLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetSongsArtistArtistidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /songs/artist/{artistId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetSongsByArtist"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetSongsByArtist"
          },
          "GetUnderscorealbumUnderscorebyUnderscoreidLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUnderscorealbumUnderscorebyUnderscoreid": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetAlbumsAlbumidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /albums/{albumId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUnderscorealbumUnderscorebyUnderscoreid"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUnderscorealbumUnderscorebyUnderscoreid"
          },
          "GetArtistByIdLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetArtistByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetArtistById": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetArtistByIdLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetArtistsArtistidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /artists/{artistId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetArtistById"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetArtistById"
          },
          "GetArtistsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetArtistsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetArtists": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetArtistsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetArtists": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /artists",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetArtists"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetArtists"
          },
          "GetAlbumsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAlbumsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAlbums": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetAlbumsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetAlbums": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /albums",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAlbums"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAlbums"
          },
          "UploadMusicLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UploadMusicLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUploadMusic": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UploadMusicLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostMusicMetadata": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /music/metadata",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUploadMusic"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUploadMusic"
          },
          "GetPresignedUrlLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPresignedUrlLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetPresignedUrl": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetPresignedUrlLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostMusicPresigned": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /music/presigned",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetPresignedUrl"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetPresignedUrl"
          },
          "CreateAlbumLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateAlbumLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateAlbum": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "CreateAlbumLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAlbums": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /albums",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateAlbum"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateAlbum"
          },
          "GetAllMusicLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllMusicLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllMusic": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetAllMusicLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetMusicGetall": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /music/getAll",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllMusic"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllMusic"
          },
          "SubscribeUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SubscribeUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSubscribeUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "SubscribeUserLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostSubscribe": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /subscribe",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSubscribeUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSubscribeUser"
          },
          "CreateNotificationLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateNotificationLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateNotification": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "CreateNotificationLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostNotify": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /notify",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateNotification"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateNotification"
          },
          "GetUserNotificationsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserNotificationsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUserNotifications": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetUserNotificationsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetGetusernotifications": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /getUserNotifications",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUserNotifications"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUserNotifications"
          },
          "ArtistsDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "back-artists",
              "AttributeDefinitions": [
                {
                  "AttributeName": "artistId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "artistId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "AlbumsDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "back-albums",
              "AttributeDefinitions": [
                {
                  "AttributeName": "genre",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "albumId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "genre",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "albumId",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "albumId-index",
                  "KeySchema": [
                    {
                      "AttributeName": "albumId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "MusicS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "back-music-bucket",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "PUT",
                      "GET",
                      "POST"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "MusicFilesDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "back-music-files",
              "AttributeDefinitions": [
                {
                  "AttributeName": "musicId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "musicId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "MusicMetaDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "back-music-meta",
              "AttributeDefinitions": [
                {
                  "AttributeName": "musicId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "musicId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "SubscriptionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "back-subscriptions",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "targetId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "targetId",
                  "KeyType": "RANGE"
                }
              ]
            }
          },
          "NotificationsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "back-notifications",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "notificationId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "notificationId",
                  "KeyType": "RANGE"
                }
              ]
            }
          },
          "CognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "MapsterUserPool",
              "UsernameAttributes": [
                "email"
              ],
              "AutoVerifiedAttributes": [],
              "AdminCreateUserConfig": {
                "AllowAdminCreateUserOnly": false
              },
              "Schema": [
                {
                  "Name": "given_name",
                  "AttributeDataType": "String",
                  "Required": true,
                  "Mutable": true
                },
                {
                  "Name": "family_name",
                  "AttributeDataType": "String",
                  "Required": true,
                  "Mutable": true
                },
                {
                  "Name": "email",
                  "AttributeDataType": "String",
                  "Required": true,
                  "Mutable": false
                },
                {
                  "Name": "birthdate",
                  "AttributeDataType": "String",
                  "Required": true,
                  "Mutable": true
                }
              ],
              "Policies": {
                "PasswordPolicy": "<REDACTED>"
              }
            }
          },
          "AdminGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "GroupName": "Admin",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "Description": "Mapster administrators group",
              "Precedence": 1
            }
          },
          "UserGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "GroupName": "User",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "Description": "Mapster regular users group",
              "Precedence": 10
            }
          },
          "CognitoUserPoolClientWeb": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "MapsterWebClient",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "GenerateSecret": "<REDACTED>",
              "ExplicitAuthFlows": [
                "ALLOW_USER_SRP_AUTH",
                "ALLOW_USER_PASSWORD_AUTH",
                "ALLOW_REFRESH_TOKEN_AUTH"
              ],
              "PreventUserExistenceErrors": "ENABLED"
            }
          },
          "WebHostingBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "back-website-bucket",
              "WebsiteConfiguration": {
                "IndexDocument": "index.html",
                "ErrorDocument": "index.html"
              },
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": false,
                "BlockPublicPolicy": false,
                "IgnorePublicAcls": false,
                "RestrictPublicBuckets": false
              }
            }
          },
          "WebHostingBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "WebHostingBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "WebHostingBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
            "Export": {
              "Name": "sls-back-dev-ServerlessDeploymentBucketName"
            }
          },
          "PreRegistrationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PreRegistrationLambdaVersionZvktGBPn4naTzBHLPl6BBTE7TCsJH8Xd4AoKC6dCESw"
            },
            "Export": {
              "Name": "sls-back-dev-PreRegistrationLambdaFunctionQualifiedArn"
            }
          },
          "PostConfirmationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PostConfirmationLambdaVersionJHgPBWkjh7rpxakfR0T9PZWrME1vlsXQ8J7WsTvXud4"
            },
            "Export": {
              "Name": "sls-back-dev-PostConfirmationLambdaFunctionQualifiedArn"
            }
          },
          "CreateArtistLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateArtistLambdaVersionZfalFaXX4Qx6HlEthm67NvqnUJc4iKgfvCTbPyIaNI"
            },
            "Export": {
              "Name": "sls-back-dev-CreateArtistLambdaFunctionQualifiedArn"
            }
          },
          "FilterHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "FilterHandlerLambdaVersionHxx45CfS7Bd7xeOSmMQl8ySrgqRWfw5EnVX1EvkHv8c"
            },
            "Export": {
              "Name": "sls-back-dev-FilterHandlerLambdaFunctionQualifiedArn"
            }
          },
          "GetSongsByAlbumLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSongsByAlbumLambdaVersionWoUMc7VjlnYEekWlhomUrQ023ppvzveV6mJy0XUv8"
            },
            "Export": {
              "Name": "sls-back-dev-GetSongsByAlbumLambdaFunctionQualifiedArn"
            }
          },
          "GetSongsByArtistLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSongsByArtistLambdaVersionZ3zB2LFDUzg8eRDqd2O1oPZCXSz5VAtUDJTZqyniG0U"
            },
            "Export": {
              "Name": "sls-back-dev-GetSongsByArtistLambdaFunctionQualifiedArn"
            }
          },
          "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUnderscorealbumUnderscorebyUnderscoreidLambdaVersionpnMwxJVlVYdIeIWlqMMIg71S5wVcgNes7fRLTv2HEM"
            },
            "Export": {
              "Name": "sls-back-dev-GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunctionQualifiedArn"
            }
          },
          "GetArtistByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetArtistByIdLambdaVersions3NUfhDSP5wIXu0FhmA0IGzTouuhrkpnao7Iq98XIg8"
            },
            "Export": {
              "Name": "sls-back-dev-GetArtistByIdLambdaFunctionQualifiedArn"
            }
          },
          "GetArtistsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetArtistsLambdaVersionze1IdBmFFsqvAHuw1xP7SihE2LzG5EDo7l2qRN4Y"
            },
            "Export": {
              "Name": "sls-back-dev-GetArtistsLambdaFunctionQualifiedArn"
            }
          },
          "GetAlbumsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAlbumsLambdaVersionu3ZwETCax5vqo6hyZv77alcdGd9fad9XyaPYfyZss"
            },
            "Export": {
              "Name": "sls-back-dev-GetAlbumsLambdaFunctionQualifiedArn"
            }
          },
          "UploadMusicLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UploadMusicLambdaVersionkEgBlJCLg1uxMFvdzgljipksggPdvg5Kb1tjp1hKU"
            },
            "Export": {
              "Name": "sls-back-dev-UploadMusicLambdaFunctionQualifiedArn"
            }
          },
          "GetPresignedUrlLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPresignedUrlLambdaVersionc5sig7cIXqxvawixQJ1V9nEskC8Ax5cMnl6FK4JN4"
            },
            "Export": {
              "Name": "sls-back-dev-GetPresignedUrlLambdaFunctionQualifiedArn"
            }
          },
          "CreateAlbumLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateAlbumLambdaVersionXeCvkCI6RiS0cVFkShiMsaZ9X9UHfElAq62Gr5msCw"
            },
            "Export": {
              "Name": "sls-back-dev-CreateAlbumLambdaFunctionQualifiedArn"
            }
          },
          "GetAllMusicLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllMusicLambdaVersion2hVbZk7a4AxSNFthFwoOUY0YttLEeq1b10y1R3URGe8"
            },
            "Export": {
              "Name": "sls-back-dev-GetAllMusicLambdaFunctionQualifiedArn"
            }
          },
          "SubscribeUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SubscribeUserLambdaVersionW5NRIDmevPVgZ5RCmU6eLs7W2pnoWLOMY2UyZCiM"
            },
            "Export": {
              "Name": "sls-back-dev-SubscribeUserLambdaFunctionQualifiedArn"
            }
          },
          "CreateNotificationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateNotificationLambdaVersion6YrzYkhkrtfIere6bfZSYxO44ivquW4qYqtTEJpA"
            },
            "Export": {
              "Name": "sls-back-dev-CreateNotificationLambdaFunctionQualifiedArn"
            }
          },
          "GetUserNotificationsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserNotificationsLambdaVersionn3qMY7F4R4CufZYt9szKkfkk7bbsIgrbjWWEgIqzCc"
            },
            "Export": {
              "Name": "sls-back-dev-GetUserNotificationsLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-back-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-back-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\r\n# org: petardragicevic\r\n# \"app\" enables Serverless Framework Dashboard features and sharing them with other Services.\r\napp: app\r\n# \"service\" is the name of this project. This will also be added to your AWS resource names.\r\nservice: back\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: python3.12\r\n  region: eu-central-1\r\n  environment:\r\n    ARTISTS_TABLE: ${self:service}-artists\r\n    MUSIC_BUCKET: ${self:service}-music-bucket\r\n    MUSIC_FILES_TABLE: ${self:service}-music-files\r\n    MUSIC_META_TABLE: ${self:service}-music-meta\r\n    ALBUMS_TABLE: ${self:service}-albums\r\n  iam:\r\n    role:\r\n      statements:\r\n        - Effect: \"Allow\"\r\n          Action:\r\n            - \"dynamodb:PutItem\"\r\n            - \"dynamodb:Scan\"\r\n            - \"dynamodb:GetItem\"\r\n            - \"dynamodb:Query\"\r\n            - \"dynamodb:UpdateItem\"\r\n          Resource:\r\n            - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-artists\"\r\n            - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-albums\"\r\n            - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-music-files\"\r\n            - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-music-meta\"\r\n            - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-albums/index/albumId-index\"\r\n            # - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-music-meta/index/albumId-index\"\r\n\r\n        - Effect: \"Allow\"\r\n          Action:\r\n            - \"s3:PutObject\"\r\n            - \"s3:PutObjectAcl\"\r\n            - \"s3:GetObject\"\r\n          Resource:\r\n            Fn::Join:\r\n              - \"\"\r\n              - - \"arn:aws:s3:::\"\r\n                - \"${self:service}-music-bucket\"\r\n                - \"/*\"\r\n                \r\n        - Effect: \"Allow\"\r\n          Action:\r\n            - \"cognito-idp:AdminAddUserToGroup\"\r\n            - \"cognito-idp:ListUsers\" \r\n          Resource:\r\n            - !GetAtt CognitoUserPool.Arn \r\n          \r\n  httpApi:\r\n    cors:\r\n      allowedOrigins:\r\n        - \"*\"\r\n      allowedMethods:\r\n        - \"PUT\"\r\n        - \"GET\"\r\n        - \"POST\"\r\n        - \"PUT\"\r\n        - \"DELETE\"\r\n        - \"OPTIONS\"\r\n      allowedHeaders:\r\n        - \"Content-Type\"\r\n        - \"Authorization\"\r\n      maxAge: 600\r\n    authorizers:\r\n      cognitoAuthorizer:\r\n        type: jwt\r\n        identitySource: $request.header.Authorization\r\n        issuerUrl: !Sub \"https://cognito-idp.${self:provider.region}.amazonaws.com/${CognitoUserPool}\"\r\n        audience:\r\n          - !Ref CognitoUserPoolClientWeb\r\n\r\nfunctions:\r\n  preRegistration:\r\n    handler: handlers.auth.preSignUp\r\n    events:\r\n      - cognitoUserPool:\r\n          pool: MapsterUserPool\r\n          trigger: PreSignUp\r\n\r\n  postConfirmation:\r\n    handler: handlers.auth.postConfirmation\r\n    events:\r\n      - cognitoUserPool:\r\n          pool: MapsterUserPool\r\n          trigger: PostConfirmation\r\n\r\n  createArtist:\r\n    handler: handlers.artist-creation.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /artists\r\n          method: post\r\n\r\n  filterHandler:\r\n    handler: handlers.filter.filter_handler\r\n    events:\r\n      - httpApi:\r\n          path: /filter\r\n          method: get\r\n          request:\r\n            parameters:\r\n              querystrings:\r\n                genre: true\r\n\r\n  getSongsByAlbum:\r\n    handler: handlers.get_songs_by_album.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /songs/album/{albumId}\r\n          method: get\r\n    environment:\r\n      MUSIC_META_TABLE: !Ref MusicMetaDynamoDBTable\r\n\r\n  getSongsByArtist:\r\n    handler: handlers.get_songs_by_artist.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /songs/artist/{artistId}\r\n          method: get\r\n    environment:\r\n      MUSIC_META_TABLE: !Ref MusicMetaDynamoDBTable\r\n\r\n  get_album_by_id:\r\n    handler: handlers.get_album_by_id.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /albums/{albumId}\r\n          method: get\r\n          cors: true\r\n    environment:\r\n      ALBUMS_TABLE: !Ref AlbumsDynamoDBTable\r\n\r\n  getArtistById:\r\n    handler: handlers.get_artist_by_id.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /artists/{artistId}\r\n          method: get\r\n          cors: true\r\n    environment:\r\n      ARTISTS_TABLE: !Ref ArtistsDynamoDBTable\r\n\r\n  getArtists:\r\n    handler: handlers.get_artists.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /artists\r\n          method: get\r\n\r\n  getAlbums:\r\n    handler: handlers.get_album.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /albums\r\n          method: get\r\n\r\n  uploadMusic:\r\n    handler: handlers/upload_music.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /music/metadata\r\n          method: post\r\n          cors: true\r\n\r\n  getPresignedUrl:\r\n    handler: handlers/get_presigned_url.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /music/presigned\r\n          method: post\r\n          cors: true\r\n\r\n  createAlbum:\r\n    handler: handlers.create_album.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /albums\r\n          method: post\r\n\r\n  getAllMusic:\r\n    handler: handlers.get_music.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /music/getAll\r\n          method: get\r\n          cors: true\r\n\r\n  subscribeUser:\r\n    handler: handlers.subscribe_user.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /subscribe\r\n          method: post\r\n          cors: true\r\n    \r\n\r\n  createNotification:\r\n    handler: handlers.create_notifications.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /notify\r\n          method: post\r\n          cors: true\r\n\r\n  getUserNotifications:\r\n    handler: handlers.get_user_notifications.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /getUserNotifications\r\n          method: get\r\n          cors: true\r\n    \r\nresources:\r\n  Resources:\r\n    ArtistsDynamoDBTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-artists\r\n        AttributeDefinitions:\r\n          - AttributeName: artistId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: artistId\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    AlbumsDynamoDBTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-albums\r\n        AttributeDefinitions:\r\n          - AttributeName: genre\r\n            AttributeType: S\r\n          - AttributeName: albumId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: genre\r\n            KeyType: HASH\r\n          - AttributeName: albumId\r\n            KeyType: RANGE\r\n        BillingMode: PAY_PER_REQUEST\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: albumId-index\r\n            KeySchema:\r\n              - AttributeName: albumId\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n\r\n    MusicS3Bucket:\r\n      Type: AWS::S3::Bucket\r\n      Properties:\r\n        BucketName: ${self:service}-music-bucket\r\n        CorsConfiguration:\r\n          CorsRules:\r\n            - AllowedHeaders:\r\n                - \"*\"\r\n              AllowedMethods:\r\n                - PUT # KRITIČNO: Dozvoljavamo PUT za upload fajla\r\n                - GET\r\n                - POST\r\n              AllowedOrigins:\r\n                - \"*\" # Dozvolite pristup sa svih domena\r\n              MaxAge: 3000\r\n\r\n    MusicFilesDynamoDBTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-music-files\r\n        AttributeDefinitions:\r\n          - AttributeName: musicId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: musicId\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    MusicMetaDynamoDBTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-music-meta\r\n        AttributeDefinitions:\r\n          - AttributeName: musicId\r\n            AttributeType: S\r\n          # - AttributeName: albumId\r\n          #   AttributeType: S\r\n        KeySchema:\r\n          # - AttributeName: albumId\r\n          #   KeyType: HASH\r\n          - AttributeName: musicId\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n        # GlobalSecondaryIndexes:\r\n        #   - IndexName: album-index\r\n        #     KeySchema:\r\n        #       - AttributeName: album\r\n        #         KeyType: HASH\r\n        #     Projection:\r\n        #       ProjectionType: ALL\r\n\r\n \r\n    SubscriptionsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-subscriptions\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n          - AttributeName: targetId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n          - AttributeName: targetId\r\n            KeyType: RANGE\r\n\r\n    NotificationsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-notifications\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n          - AttributeName: notificationId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n          - AttributeName: notificationId\r\n            KeyType: RANGE\r\n\r\n\r\n\r\n    #region Cognito\r\n\r\n    CognitoUserPool:\r\n      Type: AWS::Cognito::UserPool\r\n      Properties:\r\n        UserPoolName: MapsterUserPool\r\n        UsernameAttributes: [email]\r\n        AutoVerifiedAttributes: []\r\n        #        SelfSignUpEnabled: true\r\n        #        AccountRecoverySetting:\r\n        #          RecoveryMechanisms: []\r\n\r\n        AdminCreateUserConfig:\r\n          AllowAdminCreateUserOnly: false\r\n\r\n        Schema:\r\n          - Name: given_name\r\n            AttributeDataType: String\r\n            Required: true\r\n            Mutable: true\r\n          - Name: family_name\r\n            AttributeDataType: String\r\n            Required: true\r\n            Mutable: true\r\n          - Name: email\r\n            AttributeDataType: String\r\n            Required: true\r\n            Mutable: false\r\n          - Name: birthdate\r\n            AttributeDataType: String\r\n            Required: true\r\n            Mutable: true\r\n\r\n        Policies:\r\n          PasswordPolicy:\r\n            MinimumLength: 6\r\n            RequireLowercase: true\r\n            RequireUppercase: false\r\n            RequireNumbers: false\r\n            RequireSymbols: false\r\n\r\n    AdminGroup:\r\n      Type: AWS::Cognito::UserPoolGroup\r\n      Properties:\r\n        GroupName: Admin\r\n        UserPoolId: !Ref CognitoUserPool\r\n        Description: \"Mapster administrators group\"\r\n        Precedence: 1\r\n\r\n    UserGroup:\r\n      Type: AWS::Cognito::UserPoolGroup\r\n      Properties:\r\n        GroupName: User\r\n        UserPoolId: !Ref CognitoUserPool\r\n        Description: \"Mapster regular users group\"\r\n        Precedence: 10\r\n\r\n    CognitoUserPoolClientWeb:\r\n      Type: AWS::Cognito::UserPoolClient\r\n      Properties:\r\n        ClientName: MapsterWebClient\r\n        UserPoolId: !Ref CognitoUserPool\r\n        GenerateSecret: false\r\n        ExplicitAuthFlows:\r\n          - ALLOW_USER_SRP_AUTH\r\n          - ALLOW_USER_PASSWORD_AUTH\r\n          - ALLOW_REFRESH_TOKEN_AUTH\r\n        PreventUserExistenceErrors: ENABLED\r\n\r\n    #endregion\r\n    WebHostingBucket:\r\n      Type: AWS::S3::Bucket\r\n      Properties:\r\n        BucketName: ${self:service}-website-bucket\r\n        WebsiteConfiguration:\r\n          IndexDocument: index.html\r\n          ErrorDocument: index.html\r\n        PublicAccessBlockConfiguration:\r\n          BlockPublicAcls: false\r\n          BlockPublicPolicy: false\r\n          IgnorePublicAcls: false\r\n          RestrictPublicBuckets: false\r\n\r\n    WebHostingBucketPolicy:\r\n      Type: AWS::S3::BucketPolicy\r\n      Properties:\r\n        Bucket: !Ref WebHostingBucket\r\n        PolicyDocument:\r\n          Statement:\r\n            - Effect: Allow\r\n              Principal: \"*\"\r\n              Action: s3:GetObject\r\n              Resource: !Join [\"\", [\"arn:aws:s3:::\", !Ref WebHostingBucket, \"/*\"]]\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "74ed4037-8c34-4dde-9b25-d69c334ed241",
    "orgName": "petardragicevic",
    "userId": "j8z1kqJvdkxv64tfMC",
    "userName": "petardragicevic",
    "serviceProviderAwsAccountId": "038839713640",
    "serviceProviderAwsCfStackName": "back-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:eu-central-1:038839713640:stack/back-dev/a57aee00-b04e-11f0-8d35-0619273ba615",
    "serviceProviderAwsCfStackCreated": "2025-10-23T20:27:07.979Z",
    "serviceProviderAwsCfStackUpdated": "2025-10-24T00:44:35.850Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "PreRegistrationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:038839713640:function:back-dev-preRegistration:85",
        "Description": "Current Lambda function version",
        "ExportName": "sls-back-dev-PreRegistrationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateArtistLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:038839713640:function:back-dev-createArtist:88",
        "Description": "Current Lambda function version",
        "ExportName": "sls-back-dev-CreateArtistLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "wb71odl9aa",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-back-dev-HttpApiId"
      },
      {
        "OutputKey": "FilterHandlerLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:038839713640:function:back-dev-filterHandler:70",
        "Description": "Current Lambda function version",
        "ExportName": "sls-back-dev-FilterHandlerLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
        "ExportName": "sls-back-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "PostConfirmationLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:038839713640:function:back-dev-postConfirmation:84",
        "Description": "Current Lambda function version",
        "ExportName": "sls-back-dev-PostConfirmationLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://wb71odl9aa.execute-api.eu-central-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-back-dev-HttpApiUrl"
      },
      {
        "OutputKey": "GetAlbumsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:038839713640:function:back-dev-getAlbums:70",
        "Description": "Current Lambda function version",
        "ExportName": "sls-back-dev-GetAlbumsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateAlbumLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:038839713640:function:back-dev-createAlbum:38",
        "Description": "Current Lambda function version",
        "ExportName": "sls-back-dev-CreateAlbumLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetSongsByAlbumLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:038839713640:function:back-dev-getSongsByAlbum:17",
        "Description": "Current Lambda function version",
        "ExportName": "sls-back-dev-GetSongsByAlbumLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetSongsByArtistLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:038839713640:function:back-dev-getSongsByArtist:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-back-dev-GetSongsByArtistLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetArtistByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:038839713640:function:back-dev-getArtistById:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-back-dev-GetArtistByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetArtistsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:038839713640:function:back-dev-getArtists:71",
        "Description": "Current Lambda function version",
        "ExportName": "sls-back-dev-GetArtistsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UploadMusicLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:038839713640:function:back-dev-uploadMusic:71",
        "Description": "Current Lambda function version",
        "ExportName": "sls-back-dev-UploadMusicLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:038839713640:function:back-dev-get_album_by_id:17",
        "Description": "Current Lambda function version",
        "ExportName": "sls-back-dev-GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetPresignedUrlLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-central-1:038839713640:function:back-dev-getPresignedUrl:46",
        "Description": "Current Lambda function version",
        "ExportName": "sls-back-dev-GetPresignedUrlLambdaFunctionQualifiedArn"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "PreRegistrationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-preRegistration"
          }
        },
        "PostConfirmationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-postConfirmation"
          }
        },
        "CreateArtistLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-createArtist"
          }
        },
        "FilterHandlerLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-filterHandler"
          }
        },
        "GetSongsByAlbumLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-getSongsByAlbum"
          }
        },
        "GetSongsByArtistLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-getSongsByArtist"
          }
        },
        "GetUnderscorealbumUnderscorebyUnderscoreidLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-get_album_by_id"
          }
        },
        "GetArtistByIdLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-getArtistById"
          }
        },
        "GetArtistsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-getArtists"
          }
        },
        "GetAlbumsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-getAlbums"
          }
        },
        "UploadMusicLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-uploadMusic"
          }
        },
        "GetPresignedUrlLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-getPresignedUrl"
          }
        },
        "CreateAlbumLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-createAlbum"
          }
        },
        "GetAllMusicLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-getAllMusic"
          }
        },
        "SubscribeUserLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-subscribeUser"
          }
        },
        "CreateNotificationLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-createNotification"
          }
        },
        "GetUserNotificationsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/back-dev-getUserNotifications"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "back",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/back-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/back-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem",
                        "dynamodb:Scan",
                        "dynamodb:GetItem",
                        "dynamodb:Query",
                        "dynamodb:UpdateItem"
                      ],
                      "Resource": [
                        "arn:aws:dynamodb:eu-central-1:*:table/back-artists",
                        "arn:aws:dynamodb:eu-central-1:*:table/back-albums",
                        "arn:aws:dynamodb:eu-central-1:*:table/back-music-files",
                        "arn:aws:dynamodb:eu-central-1:*:table/back-music-meta",
                        "arn:aws:dynamodb:eu-central-1:*:table/back-albums/index/albumId-index"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:PutObject",
                        "s3:PutObjectAcl",
                        "s3:GetObject"
                      ],
                      "Resource": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:aws:s3:::",
                            "back-music-bucket",
                            "/*"
                          ]
                        ]
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "cognito-idp:AdminAddUserToGroup",
                        "cognito-idp:ListUsers"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "CognitoUserPool",
                            "Arn"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "back",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "PreRegistrationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers.auth.preSignUp",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-preRegistration",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": "back-music-meta",
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "PreRegistrationLogGroup"
          ]
        },
        "PostConfirmationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers.auth.postConfirmation",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-postConfirmation",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": "back-music-meta",
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "PostConfirmationLogGroup"
          ]
        },
        "CreateArtistLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers.artist-creation.lambda_handler",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-createArtist",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": "back-music-meta",
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateArtistLogGroup"
          ]
        },
        "FilterHandlerLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers.filter.filter_handler",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-filterHandler",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": "back-music-meta",
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "FilterHandlerLogGroup"
          ]
        },
        "GetSongsByAlbumLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers.get_songs_by_album.lambda_handler",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-getSongsByAlbum",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": {
                  "Ref": "MusicMetaDynamoDBTable"
                },
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetSongsByAlbumLogGroup"
          ]
        },
        "GetSongsByArtistLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers.get_songs_by_artist.lambda_handler",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-getSongsByArtist",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": {
                  "Ref": "MusicMetaDynamoDBTable"
                },
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetSongsByArtistLogGroup"
          ]
        },
        "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers.get_album_by_id.lambda_handler",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-get_album_by_id",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": "back-music-meta",
                "ALBUMS_TABLE": {
                  "Ref": "AlbumsDynamoDBTable"
                }
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUnderscorealbumUnderscorebyUnderscoreidLogGroup"
          ]
        },
        "GetArtistByIdLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers.get_artist_by_id.lambda_handler",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-getArtistById",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": {
                  "Ref": "ArtistsDynamoDBTable"
                },
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": "back-music-meta",
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetArtistByIdLogGroup"
          ]
        },
        "GetArtistsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers.get_artists.lambda_handler",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-getArtists",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": "back-music-meta",
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetArtistsLogGroup"
          ]
        },
        "GetAlbumsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers.get_album.lambda_handler",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-getAlbums",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": "back-music-meta",
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAlbumsLogGroup"
          ]
        },
        "UploadMusicLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers/upload_music.lambda_handler",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-uploadMusic",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": "back-music-meta",
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UploadMusicLogGroup"
          ]
        },
        "GetPresignedUrlLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers/get_presigned_url.lambda_handler",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-getPresignedUrl",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": "back-music-meta",
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetPresignedUrlLogGroup"
          ]
        },
        "CreateAlbumLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers.create_album.lambda_handler",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-createAlbum",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": "back-music-meta",
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateAlbumLogGroup"
          ]
        },
        "GetAllMusicLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers.get_music.lambda_handler",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-getAllMusic",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": "back-music-meta",
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAllMusicLogGroup"
          ]
        },
        "SubscribeUserLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers.subscribe_user.lambda_handler",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-subscribeUser",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": "back-music-meta",
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "SubscribeUserLogGroup"
          ]
        },
        "CreateNotificationLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers.create_notifications.lambda_handler",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-createNotification",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": "back-music-meta",
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateNotificationLogGroup"
          ]
        },
        "GetUserNotificationsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
              "S3Key": "serverless/back/dev/1761269244130-2025-10-24T01:27:24.130Z/back.zip"
            },
            "Handler": "handlers.get_user_notifications.lambda_handler",
            "Runtime": "python3.12",
            "FunctionName": "back-dev-getUserNotifications",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "ARTISTS_TABLE": "back-artists",
                "MUSIC_BUCKET": "back-music-bucket",
                "MUSIC_FILES_TABLE": "back-music-files",
                "MUSIC_META_TABLE": "back-music-meta",
                "ALBUMS_TABLE": "back-albums"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetUserNotificationsLogGroup"
          ]
        },
        "PreRegistrationLambdaVersionZvktGBPn4naTzBHLPl6BBTE7TCsJH8Xd4AoKC6dCESw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "PreRegistrationLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "PostConfirmationLambdaVersionJHgPBWkjh7rpxakfR0T9PZWrME1vlsXQ8J7WsTvXud4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "PostConfirmationLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "CreateArtistLambdaVersionZfalFaXX4Qx6HlEthm67NvqnUJc4iKgfvCTbPyIaNI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateArtistLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "FilterHandlerLambdaVersionHxx45CfS7Bd7xeOSmMQl8ySrgqRWfw5EnVX1EvkHv8c": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "FilterHandlerLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "GetSongsByAlbumLambdaVersionWoUMc7VjlnYEekWlhomUrQ023ppvzveV6mJy0XUv8": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetSongsByAlbumLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "GetSongsByArtistLambdaVersionZ3zB2LFDUzg8eRDqd2O1oPZCXSz5VAtUDJTZqyniG0U": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetSongsByArtistLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "GetUnderscorealbumUnderscorebyUnderscoreidLambdaVersionpnMwxJVlVYdIeIWlqMMIg71S5wVcgNes7fRLTv2HEM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "GetArtistByIdLambdaVersions3NUfhDSP5wIXu0FhmA0IGzTouuhrkpnao7Iq98XIg8": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetArtistByIdLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "GetArtistsLambdaVersionze1IdBmFFsqvAHuw1xP7SihE2LzG5EDo7l2qRN4Y": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetArtistsLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "GetAlbumsLambdaVersionu3ZwETCax5vqo6hyZv77alcdGd9fad9XyaPYfyZss": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAlbumsLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "UploadMusicLambdaVersionkEgBlJCLg1uxMFvdzgljipksggPdvg5Kb1tjp1hKU": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UploadMusicLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "GetPresignedUrlLambdaVersionc5sig7cIXqxvawixQJ1V9nEskC8Ax5cMnl6FK4JN4": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetPresignedUrlLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "CreateAlbumLambdaVersionXeCvkCI6RiS0cVFkShiMsaZ9X9UHfElAq62Gr5msCw": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateAlbumLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "GetAllMusicLambdaVersion2hVbZk7a4AxSNFthFwoOUY0YttLEeq1b10y1R3URGe8": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAllMusicLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "SubscribeUserLambdaVersionW5NRIDmevPVgZ5RCmU6eLs7W2pnoWLOMY2UyZCiM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "SubscribeUserLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "CreateNotificationLambdaVersion6YrzYkhkrtfIere6bfZSYxO44ivquW4qYqtTEJpA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateNotificationLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "GetUserNotificationsLambdaVersionn3qMY7F4R4CufZYt9szKkfkk7bbsIgrbjWWEgIqzCc": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetUserNotificationsLambdaFunction"
            },
            "CodeSha256": "55eROBQcsL5qWxqemWGwh5RMA3TmzlDj7000tpY+pm0="
          }
        },
        "CognitoUserPoolMapsterUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "MapsterUserPool",
            "LambdaConfig": {
              "PreSignUp": {
                "Fn::GetAtt": [
                  "PreRegistrationLambdaFunction",
                  "Arn"
                ]
              },
              "PostConfirmation": {
                "Fn::GetAtt": [
                  "PostConfirmationLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "DependsOn": [
            "PreRegistrationLambdaFunction",
            "PostConfirmationLambdaFunction"
          ]
        },
        "PreRegistrationLambdaPermissionCognitoUserPoolMapsterUserPoolTriggerSourcePreSignUp": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "PreRegistrationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "cognito-idp.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "CognitoUserPoolMapsterUserPool",
                "Arn"
              ]
            }
          }
        },
        "PostConfirmationLambdaPermissionCognitoUserPoolMapsterUserPoolTriggerSourcePostConfirmation": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "PostConfirmationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "cognito-idp.amazonaws.com",
            "SourceArn": {
              "Fn::GetAtt": [
                "CognitoUserPoolMapsterUserPool",
                "Arn"
              ]
            }
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-back",
            "ProtocolType": "HTTP",
            "CorsConfiguration": {
              "AllowHeaders": [
                "Content-Type",
                "Authorization"
              ],
              "AllowMethods": [
                "PUT",
                "GET",
                "POST",
                "DELETE",
                "OPTIONS"
              ],
              "AllowOrigins": [
                "*"
              ],
              "MaxAge": 600
            }
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            }
          }
        },
        "HttpApiAuthorizerCognitoAuthorizer": {
          "Type": "AWS::ApiGatewayV2::Authorizer",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "Name": "cognitoAuthorizer",
            "IdentitySource": [
              "$request.header.Authorization"
            ],
            "AuthorizerType": "JWT",
            "JwtConfiguration": {
              "Audience": [
                {
                  "Ref": "CognitoUserPoolClientWeb"
                }
              ],
              "Issuer": {
                "Fn::Sub": "https://cognito-idp.eu-central-1.amazonaws.com/${CognitoUserPool}"
              }
            }
          }
        },
        "CreateArtistLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateArtistLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationCreateArtist": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "CreateArtistLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostArtists": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /artists",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCreateArtist"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCreateArtist"
        },
        "FilterHandlerLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "FilterHandlerLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationFilterHandler": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "FilterHandlerLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetFilter": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /filter",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationFilterHandler"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationFilterHandler"
        },
        "GetSongsByAlbumLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetSongsByAlbumLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetSongsByAlbum": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetSongsByAlbumLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetSongsAlbumAlbumidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /songs/album/{albumId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetSongsByAlbum"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetSongsByAlbum"
        },
        "GetSongsByArtistLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetSongsByArtistLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetSongsByArtist": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetSongsByArtistLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetSongsArtistArtistidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /songs/artist/{artistId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetSongsByArtist"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetSongsByArtist"
        },
        "GetUnderscorealbumUnderscorebyUnderscoreidLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetUnderscorealbumUnderscorebyUnderscoreid": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetAlbumsAlbumidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /albums/{albumId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetUnderscorealbumUnderscorebyUnderscoreid"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetUnderscorealbumUnderscorebyUnderscoreid"
        },
        "GetArtistByIdLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetArtistByIdLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetArtistById": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetArtistByIdLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetArtistsArtistidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /artists/{artistId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetArtistById"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetArtistById"
        },
        "GetArtistsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetArtistsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetArtists": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetArtistsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetArtists": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /artists",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetArtists"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetArtists"
        },
        "GetAlbumsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAlbumsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetAlbums": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetAlbumsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetAlbums": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /albums",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetAlbums"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetAlbums"
        },
        "UploadMusicLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UploadMusicLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUploadMusic": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UploadMusicLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostMusicMetadata": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /music/metadata",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUploadMusic"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUploadMusic"
        },
        "GetPresignedUrlLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetPresignedUrlLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetPresignedUrl": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetPresignedUrlLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostMusicPresigned": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /music/presigned",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetPresignedUrl"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetPresignedUrl"
        },
        "CreateAlbumLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateAlbumLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationCreateAlbum": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "CreateAlbumLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostAlbums": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /albums",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCreateAlbum"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCreateAlbum"
        },
        "GetAllMusicLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAllMusicLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetAllMusic": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetAllMusicLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetMusicGetall": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /music/getAll",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetAllMusic"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetAllMusic"
        },
        "SubscribeUserLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "SubscribeUserLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationSubscribeUser": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "SubscribeUserLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostSubscribe": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /subscribe",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationSubscribeUser"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationSubscribeUser"
        },
        "CreateNotificationLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateNotificationLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationCreateNotification": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "CreateNotificationLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostNotify": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /notify",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCreateNotification"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCreateNotification"
        },
        "GetUserNotificationsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetUserNotificationsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetUserNotifications": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetUserNotificationsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetGetusernotifications": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /getUserNotifications",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetUserNotifications"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetUserNotifications"
        },
        "ArtistsDynamoDBTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "back-artists",
            "AttributeDefinitions": [
              {
                "AttributeName": "artistId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "artistId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "AlbumsDynamoDBTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "back-albums",
            "AttributeDefinitions": [
              {
                "AttributeName": "genre",
                "AttributeType": "S"
              },
              {
                "AttributeName": "albumId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "genre",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "albumId",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "albumId-index",
                "KeySchema": [
                  {
                    "AttributeName": "albumId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "MusicS3Bucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "back-music-bucket",
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "PUT",
                    "GET",
                    "POST"
                  ],
                  "AllowedOrigins": [
                    "*"
                  ],
                  "MaxAge": 3000
                }
              ]
            }
          }
        },
        "MusicFilesDynamoDBTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "back-music-files",
            "AttributeDefinitions": [
              {
                "AttributeName": "musicId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "musicId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "MusicMetaDynamoDBTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "back-music-meta",
            "AttributeDefinitions": [
              {
                "AttributeName": "musicId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "musicId",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "SubscriptionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "back-subscriptions",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "targetId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "targetId",
                "KeyType": "RANGE"
              }
            ]
          }
        },
        "NotificationsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "back-notifications",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "notificationId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "userId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "notificationId",
                "KeyType": "RANGE"
              }
            ]
          }
        },
        "CognitoUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "MapsterUserPool",
            "UsernameAttributes": [
              "email"
            ],
            "AutoVerifiedAttributes": [],
            "AdminCreateUserConfig": {
              "AllowAdminCreateUserOnly": false
            },
            "Schema": [
              {
                "Name": "given_name",
                "AttributeDataType": "String",
                "Required": true,
                "Mutable": true
              },
              {
                "Name": "family_name",
                "AttributeDataType": "String",
                "Required": true,
                "Mutable": true
              },
              {
                "Name": "email",
                "AttributeDataType": "String",
                "Required": true,
                "Mutable": false
              },
              {
                "Name": "birthdate",
                "AttributeDataType": "String",
                "Required": true,
                "Mutable": true
              }
            ],
            "Policies": {
              "PasswordPolicy": "<REDACTED>"
            }
          }
        },
        "AdminGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "GroupName": "Admin",
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "Description": "Mapster administrators group",
            "Precedence": 1
          }
        },
        "UserGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "GroupName": "User",
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "Description": "Mapster regular users group",
            "Precedence": 10
          }
        },
        "CognitoUserPoolClientWeb": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ClientName": "MapsterWebClient",
            "UserPoolId": {
              "Ref": "CognitoUserPool"
            },
            "GenerateSecret": "<REDACTED>",
            "ExplicitAuthFlows": [
              "ALLOW_USER_SRP_AUTH",
              "ALLOW_USER_PASSWORD_AUTH",
              "ALLOW_REFRESH_TOKEN_AUTH"
            ],
            "PreventUserExistenceErrors": "ENABLED"
          }
        },
        "WebHostingBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "back-website-bucket",
            "WebsiteConfiguration": {
              "IndexDocument": "index.html",
              "ErrorDocument": "index.html"
            },
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": false,
              "BlockPublicPolicy": false,
              "IgnorePublicAcls": false,
              "RestrictPublicBuckets": false
            }
          }
        },
        "WebHostingBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": {
              "Ref": "WebHostingBucket"
            },
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": "*",
                  "Action": "s3:GetObject",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "WebHostingBucket"
                        },
                        "/*"
                      ]
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-eu-central-1-6e66e67f-82bd",
          "Export": {
            "Name": "sls-back-dev-ServerlessDeploymentBucketName"
          }
        },
        "PreRegistrationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "PreRegistrationLambdaVersionZvktGBPn4naTzBHLPl6BBTE7TCsJH8Xd4AoKC6dCESw"
          },
          "Export": {
            "Name": "sls-back-dev-PreRegistrationLambdaFunctionQualifiedArn"
          }
        },
        "PostConfirmationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "PostConfirmationLambdaVersionJHgPBWkjh7rpxakfR0T9PZWrME1vlsXQ8J7WsTvXud4"
          },
          "Export": {
            "Name": "sls-back-dev-PostConfirmationLambdaFunctionQualifiedArn"
          }
        },
        "CreateArtistLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateArtistLambdaVersionZfalFaXX4Qx6HlEthm67NvqnUJc4iKgfvCTbPyIaNI"
          },
          "Export": {
            "Name": "sls-back-dev-CreateArtistLambdaFunctionQualifiedArn"
          }
        },
        "FilterHandlerLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "FilterHandlerLambdaVersionHxx45CfS7Bd7xeOSmMQl8ySrgqRWfw5EnVX1EvkHv8c"
          },
          "Export": {
            "Name": "sls-back-dev-FilterHandlerLambdaFunctionQualifiedArn"
          }
        },
        "GetSongsByAlbumLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetSongsByAlbumLambdaVersionWoUMc7VjlnYEekWlhomUrQ023ppvzveV6mJy0XUv8"
          },
          "Export": {
            "Name": "sls-back-dev-GetSongsByAlbumLambdaFunctionQualifiedArn"
          }
        },
        "GetSongsByArtistLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetSongsByArtistLambdaVersionZ3zB2LFDUzg8eRDqd2O1oPZCXSz5VAtUDJTZqyniG0U"
          },
          "Export": {
            "Name": "sls-back-dev-GetSongsByArtistLambdaFunctionQualifiedArn"
          }
        },
        "GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUnderscorealbumUnderscorebyUnderscoreidLambdaVersionpnMwxJVlVYdIeIWlqMMIg71S5wVcgNes7fRLTv2HEM"
          },
          "Export": {
            "Name": "sls-back-dev-GetUnderscorealbumUnderscorebyUnderscoreidLambdaFunctionQualifiedArn"
          }
        },
        "GetArtistByIdLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetArtistByIdLambdaVersions3NUfhDSP5wIXu0FhmA0IGzTouuhrkpnao7Iq98XIg8"
          },
          "Export": {
            "Name": "sls-back-dev-GetArtistByIdLambdaFunctionQualifiedArn"
          }
        },
        "GetArtistsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetArtistsLambdaVersionze1IdBmFFsqvAHuw1xP7SihE2LzG5EDo7l2qRN4Y"
          },
          "Export": {
            "Name": "sls-back-dev-GetArtistsLambdaFunctionQualifiedArn"
          }
        },
        "GetAlbumsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAlbumsLambdaVersionu3ZwETCax5vqo6hyZv77alcdGd9fad9XyaPYfyZss"
          },
          "Export": {
            "Name": "sls-back-dev-GetAlbumsLambdaFunctionQualifiedArn"
          }
        },
        "UploadMusicLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UploadMusicLambdaVersionkEgBlJCLg1uxMFvdzgljipksggPdvg5Kb1tjp1hKU"
          },
          "Export": {
            "Name": "sls-back-dev-UploadMusicLambdaFunctionQualifiedArn"
          }
        },
        "GetPresignedUrlLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetPresignedUrlLambdaVersionc5sig7cIXqxvawixQJ1V9nEskC8Ax5cMnl6FK4JN4"
          },
          "Export": {
            "Name": "sls-back-dev-GetPresignedUrlLambdaFunctionQualifiedArn"
          }
        },
        "CreateAlbumLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateAlbumLambdaVersionXeCvkCI6RiS0cVFkShiMsaZ9X9UHfElAq62Gr5msCw"
          },
          "Export": {
            "Name": "sls-back-dev-CreateAlbumLambdaFunctionQualifiedArn"
          }
        },
        "GetAllMusicLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAllMusicLambdaVersion2hVbZk7a4AxSNFthFwoOUY0YttLEeq1b10y1R3URGe8"
          },
          "Export": {
            "Name": "sls-back-dev-GetAllMusicLambdaFunctionQualifiedArn"
          }
        },
        "SubscribeUserLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "SubscribeUserLambdaVersionW5NRIDmevPVgZ5RCmU6eLs7W2pnoWLOMY2UyZCiM"
          },
          "Export": {
            "Name": "sls-back-dev-SubscribeUserLambdaFunctionQualifiedArn"
          }
        },
        "CreateNotificationLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateNotificationLambdaVersion6YrzYkhkrtfIere6bfZSYxO44ivquW4qYqtTEJpA"
          },
          "Export": {
            "Name": "sls-back-dev-CreateNotificationLambdaFunctionQualifiedArn"
          }
        },
        "GetUserNotificationsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetUserNotificationsLambdaVersionn3qMY7F4R4CufZYt9szKkfkk7bbsIgrbjWWEgIqzCc"
          },
          "Export": {
            "Name": "sls-back-dev-GetUserNotificationsLambdaFunctionQualifiedArn"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-back-dev-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-back-dev-HttpApiUrl"
          }
        }
      }
    }
  }
}