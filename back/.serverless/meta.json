{
  "C:\\Users\\Petar\\Desktop\\OBLAK\\MAPster\\back\\serverless.yml": {
    "versionFramework": "4.22.0",
    "servicePath": "C:\\Users\\Petar\\Desktop\\OBLAK\\MAPster\\back\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "app": "app",
      "service": "back",
      "provider": {
        "name": "aws",
        "runtime": "python3.12",
        "region": "eu-central-1",
        "environment": {
          "ARTISTS_TABLE": "${self:service}-artists",
          "MUSIC_BUCKET": "${self:service}-music-bucket",
          "MUSIC_FILES_TABLE": "${self:service}-music-files",
          "MUSIC_META_TABLE": "${self:service}-music-meta",
          "ALBUMS_TABLE": "${self:service}-albums",
          "SUBSCRIPTIONS_TABLE": "${self:service}-subscriptions",
          "NOTIFICATIONS_TABLE": "${self:service}-notifications"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:PutItem",
                  "dynamodb:Scan",
                  "dynamodb:GetItem",
                  "dynamodb:Query",
                  "dynamodb:UpdateItem"
                ],
                "Resource": [
                  "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-artists",
                  "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-albums",
                  "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-music-files",
                  "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-music-meta",
                  "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-albums/index/albumId-index",
                  "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-subscriptions",
                  "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-notifications"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:PutObject",
                  "s3:PutObjectAcl",
                  "s3:GetObject"
                ],
                "Resource": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      "${self:service}-music-bucket",
                      "/*"
                    ]
                  ]
                }
              },
              {
                "Effect": "Allow",
                "Action": [
                  "cognito-idp:AdminAddUserToGroup",
                  "cognito-idp:ListUsers"
                ],
                "Resource": [
                  {
                    "Fn::GetAtt": [
                      "CognitoUserPool",
                      "Arn"
                    ]
                  }
                ]
              }
            ]
          }
        },
        "httpApi": {
          "cors": {
            "allowedOrigins": [
              "*"
            ],
            "allowedMethods": [
              "PUT",
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "OPTIONS"
            ],
            "allowedHeaders": [
              "Content-Type",
              "Authorization"
            ],
            "maxAge": 600
          },
          "authorizers": {
            "cognitoAuthorizer": {
              "type": "jwt",
              "identitySource": "$request.header.Authorization",
              "issuerUrl": {
                "Fn::Sub": "https://cognito-idp.${self:provider.region}.amazonaws.com/${CognitoUserPool}"
              },
              "audience": [
                {
                  "Ref": "CognitoUserPoolClientWeb"
                }
              ]
            }
          }
        }
      },
      "functions": {
        "preRegistration": {
          "handler": "handlers.auth.preSignUp",
          "events": [
            {
              "cognitoUserPool": {
                "pool": "MapsterUserPool",
                "trigger": "PreSignUp"
              }
            }
          ]
        },
        "postConfirmation": {
          "handler": "handlers.auth.postConfirmation",
          "events": [
            {
              "cognitoUserPool": {
                "pool": "MapsterUserPool",
                "trigger": "PostConfirmation"
              }
            }
          ]
        },
        "createArtist": {
          "handler": "handlers.artist-creation.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/artists",
                "method": "post"
              }
            }
          ]
        },
        "filterHandler": {
          "handler": "handlers.filter.filter_handler",
          "events": [
            {
              "httpApi": {
                "path": "/filter",
                "method": "get",
                "request": {
                  "parameters": {
                    "querystrings": {
                      "genre": true
                    }
                  }
                }
              }
            }
          ]
        },
        "getSongsByAlbum": {
          "handler": "handlers.get_songs_by_album.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/songs/album/{albumId}",
                "method": "get"
              }
            }
          ],
          "environment": {
            "MUSIC_META_TABLE": {
              "Ref": "MusicMetaDynamoDBTable"
            }
          }
        },
        "getSongsByArtist": {
          "handler": "handlers.get_songs_by_artist.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/songs/artist/{artistId}",
                "method": "get"
              }
            }
          ],
          "environment": {
            "MUSIC_META_TABLE": {
              "Ref": "MusicMetaDynamoDBTable"
            }
          }
        },
        "get_album_by_id": {
          "handler": "handlers.get_album_by_id.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/albums/{albumId}",
                "method": "get",
                "cors": true
              }
            }
          ],
          "environment": {
            "ALBUMS_TABLE": {
              "Ref": "AlbumsDynamoDBTable"
            }
          }
        },
        "getArtistById": {
          "handler": "handlers.get_artist_by_id.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/artists/{artistId}",
                "method": "get",
                "cors": true
              }
            }
          ],
          "environment": {
            "ARTISTS_TABLE": {
              "Ref": "ArtistsDynamoDBTable"
            }
          }
        },
        "getArtists": {
          "handler": "handlers.get_artists.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/artists",
                "method": "get"
              }
            }
          ]
        },
        "getAlbums": {
          "handler": "handlers.get_album.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/albums",
                "method": "get"
              }
            }
          ]
        },
        "uploadMusic": {
          "handler": "handlers/upload_music.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/music/metadata",
                "method": "post",
                "cors": true
              }
            }
          ]
        },
        "getPresignedUrl": {
          "handler": "handlers/get_presigned_url.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/music/presigned",
                "method": "post",
                "cors": true
              }
            }
          ]
        },
        "createAlbum": {
          "handler": "handlers.create_album.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/albums",
                "method": "post"
              }
            }
          ]
        },
        "getAllMusic": {
          "handler": "handlers.get_music.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/music/getAll",
                "method": "get",
                "cors": true
              }
            }
          ]
        },
        "subscribeUser": {
          "handler": "handlers.subscribe_user.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/subscribe",
                "method": "post",
                "cors": true
              }
            }
          ]
        },
        "createNotification": {
          "handler": "handlers.create_notifications.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/notify",
                "method": "post",
                "cors": true
              }
            }
          ]
        },
        "getUserNotifications": {
          "handler": "handlers.get_user_notifications.lambda_handler",
          "events": [
            {
              "httpApi": {
                "path": "/getUserNotifications/{userId}",
                "method": "get",
                "cors": true
              }
            }
          ]
        }
      },
      "resources": {
        "Resources": {
          "ArtistsDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "${self:service}-artists",
              "AttributeDefinitions": [
                {
                  "AttributeName": "artistId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "artistId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "AlbumsDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "${self:service}-albums",
              "AttributeDefinitions": [
                {
                  "AttributeName": "genre",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "albumId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "genre",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "albumId",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "albumId-index",
                  "KeySchema": [
                    {
                      "AttributeName": "albumId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "MusicS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "${self:service}-music-bucket",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "PUT",
                      "GET",
                      "POST"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ],
                    "MaxAge": 3000
                  }
                ]
              }
            }
          },
          "MusicFilesDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "${self:service}-music-files",
              "AttributeDefinitions": [
                {
                  "AttributeName": "musicId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "musicId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "MusicMetaDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "${self:service}-music-meta",
              "AttributeDefinitions": [
                {
                  "AttributeName": "musicId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "musicId",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "SubscriptionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "${self:service}-subscriptions",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "targetId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "targetId",
                  "KeyType": "RANGE"
                }
              ]
            }
          },
          "NotificationsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "${self:service}-notifications",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "notificationId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "userId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "notificationId",
                  "KeyType": "RANGE"
                }
              ]
            }
          },
          "CognitoUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "MapsterUserPool",
              "UsernameAttributes": [
                "email"
              ],
              "AutoVerifiedAttributes": [],
              "AdminCreateUserConfig": {
                "AllowAdminCreateUserOnly": false
              },
              "Schema": [
                {
                  "Name": "given_name",
                  "AttributeDataType": "String",
                  "Required": true,
                  "Mutable": true
                },
                {
                  "Name": "family_name",
                  "AttributeDataType": "String",
                  "Required": true,
                  "Mutable": true
                },
                {
                  "Name": "email",
                  "AttributeDataType": "String",
                  "Required": true,
                  "Mutable": false
                },
                {
                  "Name": "birthdate",
                  "AttributeDataType": "String",
                  "Required": true,
                  "Mutable": true
                }
              ],
              "Policies": {
                "PasswordPolicy": "<REDACTED>"
              }
            }
          },
          "AdminGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "GroupName": "Admin",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "Description": "Mapster administrators group",
              "Precedence": 1
            }
          },
          "UserGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "GroupName": "User",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "Description": "Mapster regular users group",
              "Precedence": 10
            }
          },
          "CognitoUserPoolClientWeb": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "MapsterWebClient",
              "UserPoolId": {
                "Ref": "CognitoUserPool"
              },
              "GenerateSecret": "<REDACTED>",
              "ExplicitAuthFlows": [
                "ALLOW_USER_SRP_AUTH",
                "ALLOW_USER_PASSWORD_AUTH",
                "ALLOW_REFRESH_TOKEN_AUTH"
              ],
              "PreventUserExistenceErrors": "ENABLED"
            }
          },
          "WebHostingBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "${self:service}-website-bucket",
              "WebsiteConfiguration": {
                "IndexDocument": "index.html",
                "ErrorDocument": "index.html"
              },
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": false,
                "BlockPublicPolicy": false,
                "IgnorePublicAcls": false,
                "RestrictPublicBuckets": false
              }
            }
          },
          "WebHostingBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "WebHostingBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": "*",
                    "Action": "s3:GetObject",
                    "Resource": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "WebHostingBucket"
                          },
                          "/*"
                        ]
                      ]
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.12",
      "region": "eu-central-1",
      "environment": {
        "ARTISTS_TABLE": "${self:service}-artists",
        "MUSIC_BUCKET": "${self:service}-music-bucket",
        "MUSIC_FILES_TABLE": "${self:service}-music-files",
        "MUSIC_META_TABLE": "${self:service}-music-meta",
        "ALBUMS_TABLE": "${self:service}-albums",
        "SUBSCRIPTIONS_TABLE": "${self:service}-subscriptions",
        "NOTIFICATIONS_TABLE": "${self:service}-notifications"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:Query",
                "dynamodb:UpdateItem"
              ],
              "Resource": [
                "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-artists",
                "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-albums",
                "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-music-files",
                "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-music-meta",
                "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-albums/index/albumId-index",
                "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-subscriptions",
                "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-notifications"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:GetObject"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    "${self:service}-music-bucket",
                    "/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "cognito-idp:AdminAddUserToGroup",
                "cognito-idp:ListUsers"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CognitoUserPool",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      },
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "*"
          ],
          "allowedMethods": [
            "PUT",
            "GET",
            "POST",
            "PUT",
            "DELETE",
            "OPTIONS"
          ],
          "allowedHeaders": [
            "Content-Type",
            "Authorization"
          ],
          "maxAge": 600
        },
        "authorizers": {
          "cognitoAuthorizer": {
            "type": "jwt",
            "identitySource": "$request.header.Authorization",
            "issuerUrl": {
              "Fn::Sub": "https://cognito-idp.${self:provider.region}.amazonaws.com/${CognitoUserPool}"
            },
            "audience": [
              {
                "Ref": "CognitoUserPoolClientWeb"
              }
            ]
          }
        }
      }
    },
    "error": {
      "message": "Forbidden",
      "stack": "Error: Forbidden\n    at Authentication.getClientDataFromAccessKey (file:///C:/Users/Petar/.serverless/releases/4.22.0/package/dist/sf-core.js:719:18653)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async Authentication.getAuthenticatedData (file:///C:/Users/Petar/.serverless/releases/4.22.0/package/dist/sf-core.js:719:3755)\n    at async Authentication.authenticate (file:///C:/Users/Petar/.serverless/releases/4.22.0/package/dist/sf-core.js:719:22222)\n    at async TraditionalRunner.resolveVariablesAndAuthenticate (file:///C:/Users/Petar/.serverless/releases/4.22.0/package/dist/sf-core.js:726:1266)\n    at async TraditionalRunner.run (file:///C:/Users/Petar/.serverless/releases/4.22.0/package/dist/sf-core.js:1353:27914)\n    at async route (file:///C:/Users/Petar/.serverless/releases/4.22.0/package/dist/sf-core.js:1528:2878)\n    at async Object.run (file:///C:/Users/Petar/.serverless/releases/4.22.0/package/dist/sf-core.js:1529:3755)\n    at async run2 (file:///C:/Users/Petar/.serverless/releases/4.22.0/package/dist/sf-core.js:1529:4909)"
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\r\n# org: petardragicevic\r\n# \"app\" enables Serverless Framework Dashboard features and sharing them with other Services.\r\napp: app\r\n# \"service\" is the name of this project. This will also be added to your AWS resource names.\r\nservice: back\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: python3.12\r\n  region: eu-central-1\r\n  environment:\r\n    ARTISTS_TABLE: ${self:service}-artists\r\n    MUSIC_BUCKET: ${self:service}-music-bucket\r\n    MUSIC_FILES_TABLE: ${self:service}-music-files\r\n    MUSIC_META_TABLE: ${self:service}-music-meta\r\n    ALBUMS_TABLE: ${self:service}-albums\r\n    SUBSCRIPTIONS_TABLE: ${self:service}-subscriptions\r\n    NOTIFICATIONS_TABLE: ${self:service}-notifications\r\n  iam:\r\n    role:\r\n      statements:\r\n        - Effect: \"Allow\"\r\n          Action:\r\n            - \"dynamodb:PutItem\"\r\n            - \"dynamodb:Scan\"\r\n            - \"dynamodb:GetItem\"\r\n            - \"dynamodb:Query\"\r\n            - \"dynamodb:UpdateItem\"\r\n          Resource:\r\n            - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-artists\"\r\n            - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-albums\"\r\n            - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-music-files\"\r\n            - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-music-meta\"\r\n            - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-albums/index/albumId-index\"\r\n            - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-subscriptions\"\r\n            - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-notifications\"\r\n            # - \"arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-music-meta/index/albumId-index\"\r\n\r\n        - Effect: \"Allow\"\r\n          Action:\r\n            - \"s3:PutObject\"\r\n            - \"s3:PutObjectAcl\"\r\n            - \"s3:GetObject\"\r\n          Resource:\r\n            Fn::Join:\r\n              - \"\"\r\n              - - \"arn:aws:s3:::\"\r\n                - \"${self:service}-music-bucket\"\r\n                - \"/*\"\r\n                \r\n        - Effect: \"Allow\"\r\n          Action:\r\n            - \"cognito-idp:AdminAddUserToGroup\"\r\n            - \"cognito-idp:ListUsers\" \r\n          Resource:\r\n            - !GetAtt CognitoUserPool.Arn \r\n          \r\n  httpApi:\r\n    cors:\r\n      allowedOrigins:\r\n        - \"*\"\r\n      allowedMethods:\r\n        - \"PUT\"\r\n        - \"GET\"\r\n        - \"POST\"\r\n        - \"PUT\"\r\n        - \"DELETE\"\r\n        - \"OPTIONS\"\r\n      allowedHeaders:\r\n        - \"Content-Type\"\r\n        - \"Authorization\"\r\n      maxAge: 600\r\n    authorizers:\r\n      cognitoAuthorizer:\r\n        type: jwt\r\n        identitySource: $request.header.Authorization\r\n        issuerUrl: !Sub \"https://cognito-idp.${self:provider.region}.amazonaws.com/${CognitoUserPool}\"\r\n        audience:\r\n          - !Ref CognitoUserPoolClientWeb\r\n\r\nfunctions:\r\n  preRegistration:\r\n    handler: handlers.auth.preSignUp\r\n    events:\r\n      - cognitoUserPool:\r\n          pool: MapsterUserPool\r\n          trigger: PreSignUp\r\n\r\n  postConfirmation:\r\n    handler: handlers.auth.postConfirmation\r\n    events:\r\n      - cognitoUserPool:\r\n          pool: MapsterUserPool\r\n          trigger: PostConfirmation\r\n\r\n  createArtist:\r\n    handler: handlers.artist-creation.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /artists\r\n          method: post\r\n\r\n  filterHandler:\r\n    handler: handlers.filter.filter_handler\r\n    events:\r\n      - httpApi:\r\n          path: /filter\r\n          method: get\r\n          request:\r\n            parameters:\r\n              querystrings:\r\n                genre: true\r\n\r\n  getSongsByAlbum:\r\n    handler: handlers.get_songs_by_album.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /songs/album/{albumId}\r\n          method: get\r\n    environment:\r\n      MUSIC_META_TABLE: !Ref MusicMetaDynamoDBTable\r\n\r\n  getSongsByArtist:\r\n    handler: handlers.get_songs_by_artist.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /songs/artist/{artistId}\r\n          method: get\r\n    environment:\r\n      MUSIC_META_TABLE: !Ref MusicMetaDynamoDBTable\r\n\r\n  get_album_by_id:\r\n    handler: handlers.get_album_by_id.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /albums/{albumId}\r\n          method: get\r\n          cors: true\r\n    environment:\r\n      ALBUMS_TABLE: !Ref AlbumsDynamoDBTable\r\n\r\n  getArtistById:\r\n    handler: handlers.get_artist_by_id.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /artists/{artistId}\r\n          method: get\r\n          cors: true\r\n    environment:\r\n      ARTISTS_TABLE: !Ref ArtistsDynamoDBTable\r\n\r\n  getArtists:\r\n    handler: handlers.get_artists.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /artists\r\n          method: get\r\n\r\n  getAlbums:\r\n    handler: handlers.get_album.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /albums\r\n          method: get\r\n\r\n  uploadMusic:\r\n    handler: handlers/upload_music.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /music/metadata\r\n          method: post\r\n          cors: true\r\n\r\n  getPresignedUrl:\r\n    handler: handlers/get_presigned_url.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /music/presigned\r\n          method: post\r\n          cors: true\r\n\r\n  createAlbum:\r\n    handler: handlers.create_album.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /albums\r\n          method: post\r\n\r\n  getAllMusic:\r\n    handler: handlers.get_music.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /music/getAll\r\n          method: get\r\n          cors: true\r\n\r\n  subscribeUser:\r\n    handler: handlers.subscribe_user.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /subscribe\r\n          method: post\r\n          cors: true\r\n    \r\n\r\n  createNotification:\r\n    handler: handlers.create_notifications.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /notify\r\n          method: post\r\n          cors: true\r\n\r\n  getUserNotifications:\r\n    handler: handlers.get_user_notifications.lambda_handler\r\n    events:\r\n      - httpApi:\r\n          path: /getUserNotifications/{userId}\r\n          method: get\r\n          cors: true\r\n    \r\nresources:\r\n  Resources:\r\n    ArtistsDynamoDBTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-artists\r\n        AttributeDefinitions:\r\n          - AttributeName: artistId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: artistId\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    AlbumsDynamoDBTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-albums\r\n        AttributeDefinitions:\r\n          - AttributeName: genre\r\n            AttributeType: S\r\n          - AttributeName: albumId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: genre\r\n            KeyType: HASH\r\n          - AttributeName: albumId\r\n            KeyType: RANGE\r\n        BillingMode: PAY_PER_REQUEST\r\n        GlobalSecondaryIndexes:\r\n          - IndexName: albumId-index\r\n            KeySchema:\r\n              - AttributeName: albumId\r\n                KeyType: HASH\r\n            Projection:\r\n              ProjectionType: ALL\r\n\r\n    MusicS3Bucket:\r\n      Type: AWS::S3::Bucket\r\n      Properties:\r\n        BucketName: ${self:service}-music-bucket\r\n        CorsConfiguration:\r\n          CorsRules:\r\n            - AllowedHeaders:\r\n                - \"*\"\r\n              AllowedMethods:\r\n                - PUT # KRITIČNO: Dozvoljavamo PUT za upload fajla\r\n                - GET\r\n                - POST\r\n              AllowedOrigins:\r\n                - \"*\" # Dozvolite pristup sa svih domena\r\n              MaxAge: 3000\r\n\r\n    MusicFilesDynamoDBTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-music-files\r\n        AttributeDefinitions:\r\n          - AttributeName: musicId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: musicId\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    MusicMetaDynamoDBTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-music-meta\r\n        AttributeDefinitions:\r\n          - AttributeName: musicId\r\n            AttributeType: S\r\n          # - AttributeName: albumId\r\n          #   AttributeType: S\r\n        KeySchema:\r\n          # - AttributeName: albumId\r\n          #   KeyType: HASH\r\n          - AttributeName: musicId\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n        # GlobalSecondaryIndexes:\r\n        #   - IndexName: album-index\r\n        #     KeySchema:\r\n        #       - AttributeName: album\r\n        #         KeyType: HASH\r\n        #     Projection:\r\n        #       ProjectionType: ALL\r\n\r\n \r\n    SubscriptionsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-subscriptions\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n          - AttributeName: targetId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n          - AttributeName: targetId\r\n            KeyType: RANGE\r\n\r\n    NotificationsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: ${self:service}-notifications\r\n        BillingMode: PAY_PER_REQUEST\r\n        AttributeDefinitions:\r\n          - AttributeName: userId\r\n            AttributeType: S\r\n          - AttributeName: notificationId\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: userId\r\n            KeyType: HASH\r\n          - AttributeName: notificationId\r\n            KeyType: RANGE\r\n\r\n\r\n\r\n    #region Cognito\r\n\r\n    CognitoUserPool:\r\n      Type: AWS::Cognito::UserPool\r\n      Properties:\r\n        UserPoolName: MapsterUserPool\r\n        UsernameAttributes: [email]\r\n        AutoVerifiedAttributes: []\r\n        #        SelfSignUpEnabled: true\r\n        #        AccountRecoverySetting:\r\n        #          RecoveryMechanisms: []\r\n\r\n        AdminCreateUserConfig:\r\n          AllowAdminCreateUserOnly: false\r\n\r\n        Schema:\r\n          - Name: given_name\r\n            AttributeDataType: String\r\n            Required: true\r\n            Mutable: true\r\n          - Name: family_name\r\n            AttributeDataType: String\r\n            Required: true\r\n            Mutable: true\r\n          - Name: email\r\n            AttributeDataType: String\r\n            Required: true\r\n            Mutable: false\r\n          - Name: birthdate\r\n            AttributeDataType: String\r\n            Required: true\r\n            Mutable: true\r\n\r\n        Policies:\r\n          PasswordPolicy:\r\n            MinimumLength: 6\r\n            RequireLowercase: true\r\n            RequireUppercase: false\r\n            RequireNumbers: false\r\n            RequireSymbols: false\r\n\r\n    AdminGroup:\r\n      Type: AWS::Cognito::UserPoolGroup\r\n      Properties:\r\n        GroupName: Admin\r\n        UserPoolId: !Ref CognitoUserPool\r\n        Description: \"Mapster administrators group\"\r\n        Precedence: 1\r\n\r\n    UserGroup:\r\n      Type: AWS::Cognito::UserPoolGroup\r\n      Properties:\r\n        GroupName: User\r\n        UserPoolId: !Ref CognitoUserPool\r\n        Description: \"Mapster regular users group\"\r\n        Precedence: 10\r\n\r\n    CognitoUserPoolClientWeb:\r\n      Type: AWS::Cognito::UserPoolClient\r\n      Properties:\r\n        ClientName: MapsterWebClient\r\n        UserPoolId: !Ref CognitoUserPool\r\n        GenerateSecret: false\r\n        ExplicitAuthFlows:\r\n          - ALLOW_USER_SRP_AUTH\r\n          - ALLOW_USER_PASSWORD_AUTH\r\n          - ALLOW_REFRESH_TOKEN_AUTH\r\n        PreventUserExistenceErrors: ENABLED\r\n\r\n    #endregion\r\n    WebHostingBucket:\r\n      Type: AWS::S3::Bucket\r\n      Properties:\r\n        BucketName: ${self:service}-website-bucket\r\n        WebsiteConfiguration:\r\n          IndexDocument: index.html\r\n          ErrorDocument: index.html\r\n        PublicAccessBlockConfiguration:\r\n          BlockPublicAcls: false\r\n          BlockPublicPolicy: false\r\n          IgnorePublicAcls: false\r\n          RestrictPublicBuckets: false\r\n\r\n    WebHostingBucketPolicy:\r\n      Type: AWS::S3::BucketPolicy\r\n      Properties:\r\n        Bucket: !Ref WebHostingBucket\r\n        PolicyDocument:\r\n          Statement:\r\n            - Effect: Allow\r\n              Principal: \"*\"\r\n              Action: s3:GetObject\r\n              Resource: !Join [\"\", [\"arn:aws:s3:::\", !Ref WebHostingBucket, \"/*\"]]\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}