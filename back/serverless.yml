# "org" ensures this Service is used with the correct Serverless Framework Access Key.
# org: petardragicevic
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: app
# "service" is the name of this project. This will also be added to your AWS resource names.
service: back

provider:
  name: aws
  runtime: python3.12
  region: eu-central-1
  environment:
    ARTISTS_TABLE: ${self:service}-artists
    MUSIC_BUCKET: ${self:service}-music-bucket
    MUSIC_FILES_TABLE: ${self:service}-music-files
    MUSIC_META_TABLE: ${self:service}-music-meta
    ALBUMS_TABLE: ${self:service}-albums
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:Scan"
            - "dynamodb:GetItem"
            - "dynamodb:Query"
            - "dynamodb:UpdateItem"
          Resource:
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-artists"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-albums"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-music-files"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-music-meta"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-albums/index/albumId-index"
            # - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-music-meta/index/albumId-index"

        - Effect: "Allow"
          Action:
            - "s3:PutObject"
            - "s3:PutObjectAcl"
            - "s3:GetObject"
          Resource:
            Fn::Join:
              - ""
              - - "arn:aws:s3:::"
                - "${self:service}-music-bucket"
                - "/*"
                
        - Effect: "Allow"
          Action:
            - "cognito-idp:AdminAddUserToGroup"
            - "cognito-idp:ListUsers" 
          Resource:
            - !GetAtt CognitoUserPool.Arn 
          
  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedMethods:
        - "PUT"
        - "GET"
        - "POST"
        - "PUT"
        - "DELETE"
        - "OPTIONS"
      allowedHeaders:
        - "Content-Type"
        - "Authorization"
      maxAge: 600
    authorizers:
      cognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: !Sub "https://cognito-idp.${self:provider.region}.amazonaws.com/${CognitoUserPool}"
        audience:
          - !Ref CognitoUserPoolClientWeb

functions:
  preRegistration:
    handler: handlers.auth.preSignUp
    events:
      - cognitoUserPool:
          pool: MapsterUserPool
          trigger: PreSignUp

  postConfirmation:
    handler: handlers.auth.postConfirmation
    events:
      - cognitoUserPool:
          pool: MapsterUserPool
          trigger: PostConfirmation

  createArtist:
    handler: handlers.artist-creation.lambda_handler
    events:
      - httpApi:
          path: /artists
          method: post

  filterHandler:
    handler: handlers.filter.filter_handler
    events:
      - httpApi:
          path: /filter
          method: get
          request:
            parameters:
              querystrings:
                genre: true

  getSongsByAlbum:
    handler: handlers.get_songs_by_album.lambda_handler
    events:
      - httpApi:
          path: /songs/album/{albumId}
          method: get
    environment:
      MUSIC_META_TABLE: !Ref MusicMetaDynamoDBTable

  getSongsByArtist:
    handler: handlers.get_songs_by_artist.lambda_handler
    events:
      - httpApi:
          path: /songs/artist/{artistId}
          method: get
    environment:
      MUSIC_META_TABLE: !Ref MusicMetaDynamoDBTable

  get_album_by_id:
    handler: handlers.get_album_by_id.lambda_handler
    events:
      - httpApi:
          path: /albums/{albumId}
          method: get
          cors: true
    environment:
      ALBUMS_TABLE: !Ref AlbumsDynamoDBTable

  getArtistById:
    handler: handlers.get_artist_by_id.lambda_handler
    events:
      - httpApi:
          path: /artists/{artistId}
          method: get
          cors: true
    environment:
      ARTISTS_TABLE: !Ref ArtistsDynamoDBTable

  getArtists:
    handler: handlers.get_artists.lambda_handler
    events:
      - httpApi:
          path: /artists
          method: get

  getAlbums:
    handler: handlers.get_album.lambda_handler
    events:
      - httpApi:
          path: /albums
          method: get

  uploadMusic:
    handler: handlers/upload_music.lambda_handler
    events:
      - httpApi:
          path: /music/metadata
          method: post
          cors: true

  getPresignedUrl:
    handler: handlers/get_presigned_url.lambda_handler
    events:
      - httpApi:
          path: /music/presigned
          method: post
          cors: true

  createAlbum:
    handler: handlers.create_album.lambda_handler
    events:
      - httpApi:
          path: /albums
          method: post

  getAllMusic:
    handler: handlers.get_music.lambda_handler
    events:
      - httpApi:
          path: /music/getAll
          method: get
          cors: true

  subscribeUser:
    handler: handlers.subscribe_user.lambda_handler
    events:
      - httpApi:
          path: /subscribe
          method: post
          cors: true
    

  createNotification:
    handler: handlers.create_notifications.lambda_handler
    events:
      - httpApi:
          path: /notify
          method: post
          cors: true

  getUserNotifications:
    handler: handlers.get_user_notifications.lambda_handler
    events:
      - httpApi:
          path: /getUserNotifications
          method: get
          cors: true
    
resources:
  Resources:
    ArtistsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-artists
        AttributeDefinitions:
          - AttributeName: artistId
            AttributeType: S
        KeySchema:
          - AttributeName: artistId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    AlbumsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-albums
        AttributeDefinitions:
          - AttributeName: genre
            AttributeType: S
          - AttributeName: albumId
            AttributeType: S
        KeySchema:
          - AttributeName: genre
            KeyType: HASH
          - AttributeName: albumId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: albumId-index
            KeySchema:
              - AttributeName: albumId
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    MusicS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-music-bucket
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - PUT # KRITIÄŒNO: Dozvoljavamo PUT za upload fajla
                - GET
                - POST
              AllowedOrigins:
                - "*" # Dozvolite pristup sa svih domena
              MaxAge: 3000

    MusicFilesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-music-files
        AttributeDefinitions:
          - AttributeName: musicId
            AttributeType: S
        KeySchema:
          - AttributeName: musicId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    MusicMetaDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-music-meta
        AttributeDefinitions:
          - AttributeName: musicId
            AttributeType: S
          # - AttributeName: albumId
          #   AttributeType: S
        KeySchema:
          # - AttributeName: albumId
          #   KeyType: HASH
          - AttributeName: musicId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        # GlobalSecondaryIndexes:
        #   - IndexName: album-index
        #     KeySchema:
        #       - AttributeName: album
        #         KeyType: HASH
        #     Projection:
        #       ProjectionType: ALL

 
    SubscriptionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-subscriptions
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: targetId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: targetId
            KeyType: RANGE

    NotificationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-notifications
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: notificationId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: notificationId
            KeyType: RANGE



    #region Cognito

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: MapsterUserPool
        UsernameAttributes: [email]
        AutoVerifiedAttributes: []
        #        SelfSignUpEnabled: true
        #        AccountRecoverySetting:
        #          RecoveryMechanisms: []

        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false

        Schema:
          - Name: given_name
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: family_name
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: false
          - Name: birthdate
            AttributeDataType: String
            Required: true
            Mutable: true

        Policies:
          PasswordPolicy:
            MinimumLength: 6
            RequireLowercase: true
            RequireUppercase: false
            RequireNumbers: false
            RequireSymbols: false

    AdminGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: Admin
        UserPoolId: !Ref CognitoUserPool
        Description: "Mapster administrators group"
        Precedence: 1

    UserGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: User
        UserPoolId: !Ref CognitoUserPool
        Description: "Mapster regular users group"
        Precedence: 10

    CognitoUserPoolClientWeb:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: MapsterWebClient
        UserPoolId: !Ref CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        PreventUserExistenceErrors: ENABLED

    #endregion
    WebHostingBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-website-bucket
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false

    WebHostingBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebHostingBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: s3:GetObject
              Resource: !Join ["", ["arn:aws:s3:::", !Ref WebHostingBucket, "/*"]]
